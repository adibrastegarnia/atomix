/*
SPDX-FileCopyrightText: 2022-present Open Networking Foundation <info@opennetworking.org>

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package atomix.runtime.primitives.countermap.v1;

import "protocol/headers.proto";
import "google/protobuf/duration.proto";
import "gogoproto/gogo.proto";

// CounterMap is a service for a counter map primitive
service CounterMap {
    // Size returns the size of the map
    rpc Size (SizeRequest) returns (SizeResponse);

    // Set sets an entry into the map
    rpc Set (SetRequest) returns (SetResponse);

    // Insert inserts an entry into the map
    rpc Insert (InsertRequest) returns (InsertResponse);

    // Update updates an entry in the map
    rpc Update (UpdateRequest) returns (UpdateResponse);

    // Increment increments a counter in the map
    rpc Increment (IncrementRequest) returns (IncrementResponse);

    // Decrement decrements a counter in the map
    rpc Decrement (DecrementRequest) returns (DecrementResponse);

    // Get gets the entry for a key
    rpc Get (GetRequest) returns (GetResponse);

    // Remove removes an entry from the map
    rpc Remove (RemoveRequest) returns (RemoveResponse);

    // Clear removes all entries from the map
    rpc Clear (ClearRequest) returns (ClearResponse);

    // Lock locks a key in the map
    rpc Lock(LockRequest) returns (LockResponse);

    // Unlock unlocks a key in the map
    rpc Unlock(UnlockRequest) returns (UnlockResponse);

    // Events listens for change events
    rpc Events (EventsRequest) returns (stream EventsResponse);

    // Entries lists all entries in the map
    rpc Entries (EntriesRequest) returns (stream EntriesResponse);
}

message SizeRequest {
    atomix.runtime.sdk.protocol.v1.QueryRequestHeaders headers = 1;
    SizeInput input = 2 [
        (gogoproto.embed) = true
    ];
}

message SizeResponse {
    atomix.runtime.sdk.protocol.v1.QueryResponseHeaders headers = 1;
    SizeOutput output = 2 [
        (gogoproto.embed) = true
    ];
}

message SetRequest {
    atomix.runtime.sdk.protocol.v1.ProposalRequestHeaders headers = 1;
    SetInput input = 2 [
        (gogoproto.embed) = true
    ];
}

message SetResponse {
    atomix.runtime.sdk.protocol.v1.ProposalResponseHeaders headers = 1;
    SetOutput output = 2 [
        (gogoproto.embed) = true
    ];
}

message InsertRequest {
    atomix.runtime.sdk.protocol.v1.ProposalRequestHeaders headers = 1;
    InsertInput input = 2 [
        (gogoproto.embed) = true
    ];
}

message InsertResponse {
    atomix.runtime.sdk.protocol.v1.ProposalResponseHeaders headers = 1;
    InsertOutput output = 2 [
        (gogoproto.embed) = true
    ];
}

message UpdateRequest {
    atomix.runtime.sdk.protocol.v1.ProposalRequestHeaders headers = 1;
    UpdateInput input = 2 [
        (gogoproto.embed) = true
    ];
}

message UpdateResponse {
    atomix.runtime.sdk.protocol.v1.ProposalResponseHeaders headers = 1;
    UpdateOutput output = 2 [
        (gogoproto.embed) = true
    ];
}

message IncrementRequest {
    atomix.runtime.sdk.protocol.v1.ProposalRequestHeaders headers = 1;
    IncrementInput input = 2 [
        (gogoproto.embed) = true
    ];
}

message IncrementResponse {
    atomix.runtime.sdk.protocol.v1.ProposalResponseHeaders headers = 1;
    IncrementOutput output = 2 [
        (gogoproto.embed) = true
    ];
}

message DecrementRequest {
    atomix.runtime.sdk.protocol.v1.ProposalRequestHeaders headers = 1;
    DecrementInput input = 2 [
        (gogoproto.embed) = true
    ];
}

message DecrementResponse {
    atomix.runtime.sdk.protocol.v1.ProposalResponseHeaders headers = 1;
    DecrementOutput output = 2 [
        (gogoproto.embed) = true
    ];
}

message GetRequest {
    atomix.runtime.sdk.protocol.v1.QueryRequestHeaders headers = 1;
    GetInput input = 2 [
        (gogoproto.embed) = true
    ];
}

message GetResponse {
    atomix.runtime.sdk.protocol.v1.QueryResponseHeaders headers = 1;
    GetOutput output = 2 [
        (gogoproto.embed) = true
    ];
}

message RemoveRequest {
    atomix.runtime.sdk.protocol.v1.ProposalRequestHeaders headers = 1;
    RemoveInput input = 2 [
        (gogoproto.embed) = true
    ];
}

message RemoveResponse {
    atomix.runtime.sdk.protocol.v1.ProposalResponseHeaders headers = 1;
    RemoveOutput output = 2 [
        (gogoproto.embed) = true
    ];
}

message ClearRequest {
    atomix.runtime.sdk.protocol.v1.ProposalRequestHeaders headers = 1;
    ClearInput input = 2 [
        (gogoproto.embed) = true
    ];
}

message ClearResponse {
    atomix.runtime.sdk.protocol.v1.ProposalResponseHeaders headers = 1;
    ClearOutput output = 2 [
        (gogoproto.embed) = true
    ];
}

message LockRequest {
    atomix.runtime.sdk.protocol.v1.ProposalRequestHeaders headers = 1;
    LockInput input = 2 [
        (gogoproto.embed) = true
    ];
}

message LockResponse {
    atomix.runtime.sdk.protocol.v1.ProposalResponseHeaders headers = 1;
    LockOutput output = 2 [
        (gogoproto.embed) = true
    ];
}

message UnlockRequest {
    atomix.runtime.sdk.protocol.v1.ProposalRequestHeaders headers = 1;
    UnlockInput input = 2 [
        (gogoproto.embed) = true
    ];
}

message UnlockResponse {
    atomix.runtime.sdk.protocol.v1.ProposalResponseHeaders headers = 1;
    UnlockOutput output = 2 [
        (gogoproto.embed) = true
    ];
}

message EntriesRequest {
    atomix.runtime.sdk.protocol.v1.QueryRequestHeaders headers = 1;
    EntriesInput input = 2 [
        (gogoproto.embed) = true
    ];
}

message EntriesResponse {
    atomix.runtime.sdk.protocol.v1.QueryResponseHeaders headers = 1;
    EntriesOutput output = 2 [
        (gogoproto.embed) = true
    ];
}

message EventsRequest {
    atomix.runtime.sdk.protocol.v1.ProposalRequestHeaders headers = 1;
    EventsInput input = 2 [
        (gogoproto.embed) = true
    ];
}

message EventsResponse {
    atomix.runtime.sdk.protocol.v1.ProposalResponseHeaders headers = 1;
    EventsOutput output = 2 [
        (gogoproto.embed) = true
    ];
}

message CounterMapListener {
    uint64 index = 1 [
        (gogoproto.casttype) = "github.com/atomix/runtime/sdk/pkg/protocol.Index"
    ];
    string key = 2;
}

message CounterMapInput {
    oneof input {
        SizeInput size = 1;
        SetInput set = 2;
        InsertInput insert = 3;
        UpdateInput update = 4;
        IncrementInput increment = 5;
        DecrementInput decrement = 6;
        GetInput get = 7;
        RemoveInput remove = 8;
        ClearInput clear = 9;
        LockInput lock = 10;
        UnlockInput unlock = 11;
        EntriesInput entries = 12;
        EventsInput events = 13;
    }
}

message CounterMapOutput {
    oneof output {
        SizeOutput size = 1;
        SetOutput set = 2;
        InsertOutput insert = 3;
        UpdateOutput update = 4;
        IncrementOutput increment = 5;
        DecrementOutput decrement = 6;
        GetOutput get = 7;
        RemoveOutput remove = 8;
        ClearOutput clear = 9;
        LockOutput lock = 10;
        UnlockOutput unlock = 11;
        EntriesOutput entries = 12;
        EventsOutput events = 13;
    }
}

message SizeInput {

}

message SizeOutput {
    uint32 size = 1;
}

message SetInput {
    string key = 1;
    int64 value = 2;
}

message SetOutput {
    int64 prev_value = 1;
}

message InsertInput {
    string key = 1;
    int64 value = 2;
}

message InsertOutput {

}

message UpdateInput {
    string key = 1;
    int64 value = 2;
    int64 prev_value = 3;
}

message UpdateOutput {
    int64 prev_value = 1;
}

message IncrementInput {
    string key = 1;
    int64 delta = 2;
}

message IncrementOutput {
    int64 prev_value = 1;
}

message DecrementInput {
    string key = 1;
    int64 delta = 2;
}

message DecrementOutput {
    int64 prev_value = 1;
}

message GetInput {
    string key = 1;
}

message GetOutput {
    int64 value = 1;
}

message RemoveInput {
    string key = 2;
    int64 prev_value = 3;
}

message RemoveOutput {
    int64 value = 1;
}

message ClearInput {

}

message ClearOutput {

}

message LockInput {
    repeated string keys = 1;
    google.protobuf.Duration timeout = 2 [
        (gogoproto.stdduration) = true
    ];
}

message LockOutput {

}

message UnlockInput {
    repeated string keys = 1;
}

message UnlockOutput {

}

message EntriesInput {
    bool watch = 1;
}

message EntriesOutput {
    Entry entry = 1 [
        (gogoproto.nullable) = false
    ];
}

message EventsInput {
    string key = 1;
}

message EventsOutput {
    Event event = 1 [
        (gogoproto.nullable) = false
    ];
}

message Event {
    string key = 1;

    oneof event {
        Inserted inserted = 2;
        Updated updated = 3;
        Removed removed = 4;
    }

    message Inserted {
        int64 value = 1;
    }

    message Updated {
        int64 value = 1;
        int64 prev_value = 2;
    }

    message Removed {
        int64 value = 1;
    }
}

message Entry {
    string key = 1;
    int64 value = 2;
}
