/*
SPDX-FileCopyrightText: 2022-present Open Networking Foundation <info@opennetworking.org>

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package atomix.runtime.v1;

option java_package = "io.atomix.api.runtime.v1";
option java_outer_classname = "RuntimeV1";
option java_multiple_files = true;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";

service Runtime {
    rpc ProgramRoutes (ProgramRoutesRequest) returns (ProgramRoutesResponse);
    rpc ConnectRoute (ConnectRouteRequest) returns (ConnectRouteResponse);
    rpc ConfigureRoute (ConfigureRouteRequest) returns (ConfigureRouteResponse);
    rpc DisconnectRoute (DisconnectRouteRequest) returns (DisconnectRouteResponse);
}

message RoutingRule {
    PrimitiveType type = 1 [
        (gogoproto.nullable) = false
    ];
    repeated PrimitiveID primitives = 2 [
        (gogoproto.nullable) = false
    ];
    repeated string tags = 3;
    google.protobuf.Any config = 4;
}

message DriverID {
    option (gogoproto.equal) = true;
    string name = 1;
    string api_version = 2 [
        (gogoproto.customname) = "APIVersion"
    ];
}

message RouteID {
    option (gogoproto.equal) = true;
    string namespace = 1;
    string name = 2;
}

message PrimitiveID {
    option (gogoproto.equal) = true;
    string name = 1;
}

message PrimitiveType {
    option (gogoproto.equal) = true;
    string name = 1;
    string api_version = 2 [
        (gogoproto.customname) = "APIVersion"
    ];
}

message PrimitiveMeta {
    option (gogoproto.equal) = true;
    PrimitiveType type = 1 [
        (gogoproto.nullable) = false
    ];
    PrimitiveID id = 2 [
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
    repeated string tags = 3;
}

message ProgramRoutesRequest {
    RouteID route_id = 1 [
        (gogoproto.customname) = "RouteID",
        (gogoproto.nullable) = false
    ];
    repeated RoutingRule rules = 2 [
        (gogoproto.nullable) = false
    ];
}

message ProgramRoutesResponse {

}

message ConnectRouteRequest {
    RouteID route_id = 1 [
        (gogoproto.customname) = "RouteID",
        (gogoproto.nullable) = false
    ];
    DriverID driver_id = 2 [
        (gogoproto.customname) = "DriverID",
        (gogoproto.nullable) = false
    ];
    google.protobuf.Any config = 3;
}

message ConnectRouteResponse {

}

message ConfigureRouteRequest {
    RouteID route_id = 1 [
        (gogoproto.customname) = "RouteID",
        (gogoproto.nullable) = false
    ];
    google.protobuf.Any config = 2;
}

message ConfigureRouteResponse {

}

message DisconnectRouteRequest {
    RouteID route_id = 1 [
        (gogoproto.customname) = "RouteID",
        (gogoproto.nullable) = false
    ];
}

message DisconnectRouteResponse {

}
