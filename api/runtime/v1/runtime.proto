/*
SPDX-FileCopyrightText: 2022-present Open Networking Foundation <info@opennetworking.org>

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package atomix.runtime.v1;

option java_package = "io.atomix.api.runtime.v1";
option java_outer_classname = "RuntimeV1";
option java_multiple_files = true;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";

service Runtime {
    rpc AddRoute (AddRouteRequest) returns (AddRouteResponse);
    rpc RemoveRoute (RemoveRouteRequest) returns (RemoveRouteResponse);
    rpc ConnectStore (ConnectStoreRequest) returns (ConnectStoreResponse);
    rpc ConfigureStore (ConfigureStoreRequest) returns (ConfigureStoreResponse);
    rpc DisconnectStore (DisconnectStoreRequest) returns (DisconnectStoreResponse);
}

message AddRouteRequest {
    Route route = 1;
}

message AddRouteResponse {

}

message RemoveRouteRequest {
    StoreID store_id = 1 [
        (gogoproto.customname) = "StoreID",
        (gogoproto.nullable) = false
    ];
}

message RemoveRouteResponse {

}

message Route {
    StoreID store_id = 1 [
        (gogoproto.customname) = "StoreID",
        (gogoproto.nullable) = false
    ];
    repeated string match_tags = 2;
    repeated Primitive primitives = 3 [
        (gogoproto.nullable) = false
    ];
}

message DriverID {
    option (gogoproto.equal) = true;
    string name = 1;
    string api_version = 2 [
        (gogoproto.customname) = "APIVersion"
    ];
}

message StoreID {
    option (gogoproto.equal) = true;
    string namespace = 1;
    string name = 2;
}

message Store {
    StoreID store_id = 1 [
        (gogoproto.customname) = "StoreID",
        (gogoproto.nullable) = false
    ];
    google.protobuf.Any spec = 2;
}

message PrimitiveID {
    option (gogoproto.equal) = true;
    string name = 1;
}

message PrimitiveType {
    option (gogoproto.equal) = true;
    string name = 1;
    string api_version = 2 [
        (gogoproto.customname) = "APIVersion"
    ];
}

message PrimitiveMeta {
    option (gogoproto.equal) = true;
    PrimitiveType type = 1 [
        (gogoproto.nullable) = false
    ];
    PrimitiveID id = 2 [
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
    repeated string tags = 3;
}

message Primitive {
    option (gogoproto.equal) = true;
    PrimitiveMeta meta = 1 [
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
    google.protobuf.Any spec = 2;
}

message ConnectStoreRequest {
    DriverID driver_id = 1 [
        (gogoproto.customname) = "DriverID",
        (gogoproto.nullable) = false
    ];
    Store store = 2 [
        (gogoproto.nullable) = false
    ];
}

message ConnectStoreResponse {

}

message ConfigureStoreRequest {
    Store store = 1 [
        (gogoproto.nullable) = false
    ];
}

message ConfigureStoreResponse {

}

message DisconnectStoreRequest {
    StoreID store_id = 1 [
        (gogoproto.customname) = "StoreID",
        (gogoproto.nullable) = false
    ];
}

message DisconnectStoreResponse {

}
