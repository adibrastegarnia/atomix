/*
SPDX-FileCopyrightText: 2022-present Open Networking Foundation <info@opennetworking.org>

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package atomix.value.v1;

import "atomix/primitive/v1/descriptor.proto";
import "atomix/primitive/v1/primitive.proto";
import "atomix/time/v1/timestamp.proto";
import "gogoproto/gogo.proto";

// Value is a service for a value primitive
service Value {
    // Create creates the value
    rpc Create (CreateRequest) returns (CreateResponse) {
        option (atomix.primitive.v1.operation_id) = 1;
        option (atomix.primitive.v1.operation_type) = CREATE;
    }

    // Close closes the value
    rpc Close (CloseRequest) returns (CloseResponse) {
        option (atomix.primitive.v1.operation_id) = 2;
        option (atomix.primitive.v1.operation_type) = CLOSE;
    }

    // Set sets the value
    rpc Set (SetRequest) returns (SetResponse) {
        option (atomix.primitive.v1.operation_id) = 3;
        option (atomix.primitive.v1.operation_type) = COMMAND;
    }

    // Get gets the value
    rpc Get (GetRequest) returns (GetResponse) {
        option (atomix.primitive.v1.operation_id) = 4;
        option (atomix.primitive.v1.operation_type) = QUERY;
    }

    // Events listens for value change events
    rpc Events (EventsRequest) returns (stream EventsResponse) {
        option (atomix.primitive.v1.operation_id) = 5;
        option (atomix.primitive.v1.operation_type) = COMMAND;
    }
}

message CreateRequest {
    atomix.primitive.v1.PrimitiveId id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
}

message CreateResponse {

}

message CloseRequest {
    atomix.primitive.v1.PrimitiveId id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
}

message CloseResponse {

}

message GetRequest {
    atomix.primitive.v1.PrimitiveId id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
}

message GetResponse {
    bytes value = 1;
    atomix.time.v1.Timestamp timestamp = 2;
}

message SetRequest {
    atomix.primitive.v1.PrimitiveId id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    bytes value = 2;
    atomix.time.v1.Timestamp if_timestamp = 3;
}

message SetResponse {
    bytes value = 1;
    atomix.time.v1.Timestamp timestamp = 2;
}

message EventsRequest {
    atomix.primitive.v1.PrimitiveId id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
}

message EventsResponse {
    Event event = 1 [
        (gogoproto.nullable) = false
    ];
}

message Event {
    Type type = 1;
    bytes value = 2;
    atomix.time.v1.Timestamp timestamp = 3;

    enum Type {
        NONE = 0;
        UPDATE = 1;
    }
}
