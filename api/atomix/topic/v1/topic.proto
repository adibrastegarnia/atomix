/*
SPDX-FileCopyrightText: 2022-present Open Networking Foundation <info@opennetworking.org>

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package atomix.topic.v1;

import "atomix/primitive/v1/descriptor.proto";
import "atomix/primitive/v1/primitive.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

service Topic {
    // Create creates the topic
    rpc Create (CreateRequest) returns (CreateResponse) {
        option (atomix.primitive.v1.operation_id) = 1;
        option (atomix.primitive.v1.operation_type) = CREATE;
    }

    // Close closes the topic
    rpc Close (CloseRequest) returns (CloseResponse) {
        option (atomix.primitive.v1.operation_id) = 2;
        option (atomix.primitive.v1.operation_type) = CLOSE;
    }

    // Publish publishes a message to the topic
    rpc Publish(PublishRequest) returns (PublishResponse) {
        option (atomix.primitive.v1.operation_id) = 3;
        option (atomix.primitive.v1.operation_type) = COMMAND;
    }

    // Subscribe subscribes to receive messages from the topic
    rpc Subscribe(SubscribeRequest) returns (stream SubscribeResponse) {
        option (atomix.primitive.v1.operation_id) = 4;
        option (atomix.primitive.v1.operation_type) = QUERY;
    }
}

message CreateRequest {
    atomix.primitive.v1.PrimitiveId id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    map<string, string> labels = 2;
}

message CreateResponse {

}

message CloseRequest {
    atomix.primitive.v1.PrimitiveId id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
}

message CloseResponse {

}

message PublishRequest {
    atomix.primitive.v1.PrimitiveId id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    bytes payload = 2;
}

message PublishResponse {

}

message SubscribeRequest {
    atomix.primitive.v1.PrimitiveId id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
}

message SubscribeResponse {
    uint64 offset = 1;
    google.protobuf.Timestamp timestamp = 2 [
        (gogoproto.stdtime) = true
    ];
    bytes payload = 3;
}
