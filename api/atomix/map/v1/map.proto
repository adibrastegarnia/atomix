/*
SPDX-FileCopyrightText: 2022-present Open Networking Foundation <info@opennetworking.org>

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package atomix.map.v1;

import "google/protobuf/duration.proto";
import "atomix/time/v1/timestamp.proto";
import "atomix/primitive/v1/descriptor.proto";
import "gogoproto/gogo.proto";

// Map is a service for a map primitive
service Map {
    rpc Create (CreateRequest) returns (CreateResponse) {
        option (atomix.primitive.v1.operation_id) = 1;
        option (atomix.primitive.v1.operation_type) = CREATE;
    }

    rpc Close (CloseRequest) returns (CloseResponse) {
        option (atomix.primitive.v1.operation_id) = 2;
        option (atomix.primitive.v1.operation_type) = CLOSE;
    }

    // Size returns the size of the map
    rpc Size (SizeRequest) returns (SizeResponse) {
        option (atomix.primitive.v1.operation_id) = 3;
        option (atomix.primitive.v1.operation_type) = QUERY;
    }

    // Put puts an entry into the map
    rpc Put (PutRequest) returns (PutResponse) {
        option (atomix.primitive.v1.operation_id) = 4;
        option (atomix.primitive.v1.operation_type) = COMMAND;
    }

    // Get gets the entry for a key
    rpc Get (GetRequest) returns (GetResponse) {
        option (atomix.primitive.v1.operation_id) = 5;
        option (atomix.primitive.v1.operation_type) = QUERY;
    }

    // Remove removes an entry from the map
    rpc Remove (RemoveRequest) returns (RemoveResponse) {
        option (atomix.primitive.v1.operation_id) = 6;
        option (atomix.primitive.v1.operation_type) = COMMAND;
    }

    // Clear removes all entries from the map
    rpc Clear (ClearRequest) returns (ClearResponse) {
        option (atomix.primitive.v1.operation_id) = 7;
        option (atomix.primitive.v1.operation_type) = COMMAND;
    }

    // Events listens for change events
    rpc Events (EventsRequest) returns (stream EventsResponse) {
        option (atomix.primitive.v1.operation_id) = 8;
        option (atomix.primitive.v1.operation_type) = COMMAND;
    }

    // Entries lists all entries in the map
    rpc Entries (EntriesRequest) returns (stream EntriesResponse) {
        option (atomix.primitive.v1.operation_id) = 9;
        option (atomix.primitive.v1.operation_type) = QUERY;
    }
}

message CreateRequest {
    MapConfig config = 1 [
        (gogoproto.nullable) = false
    ];
}

message CreateResponse {

}

message CloseRequest {

}

message CloseResponse {

}

message MapConfig {
    MapCacheConfig cache = 1;
}

message MapCacheConfig {
    bool enabled = 1;
    int32 size = 2;
}

message SizeRequest {

}

message SizeResponse {
    uint32 size = 1;
}

message PutRequest {
    string key = 1;
    Value value = 2;
    atomix.time.v1.Timestamp timestamp = 3;
}

message PutResponse {
    Entry entry = 1 [
        (gogoproto.nullable) = false
    ];
}

message GetRequest {
    string key = 1;
}

message GetResponse {
    Entry entry = 1 [
        (gogoproto.nullable) = false
    ];
}

message RemoveRequest {
    string key = 1;
    atomix.time.v1.Timestamp timestamp = 2;
}

message RemoveResponse {
    Entry entry = 1 [
        (gogoproto.nullable) = false
    ];
}

message ClearRequest {

}

message ClearResponse {
    atomix.time.v1.Timestamp timestamp = 1;
}

message EntriesRequest {

}

message EntriesResponse {
    Entry entry = 1 [
        (gogoproto.nullable) = false
    ];
}

message EventsRequest {
    string key = 1;
    bool replay = 2;
}

message EventsResponse {
    Event event = 2 [
        (gogoproto.nullable) = false
    ];
}

message Event {
    Type type = 1;
    Entry entry = 2 [
        (gogoproto.nullable) = false
    ];

    enum Type {
        NONE = 0;
        INSERT = 1;
        UPDATE = 2;
        REMOVE = 3;
        REPLAY = 4;
    }
}

message Entry {
    string key = 1;
    Value value = 2;
    atomix.time.v1.Timestamp timestamp = 3;
}

message Value {
    bytes value = 1;
    google.protobuf.Duration ttl = 2 [
        (gogoproto.customname) = "TTL",
        (gogoproto.stdduration) = true
    ];
}
