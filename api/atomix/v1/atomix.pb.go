// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/v1/atomix.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PrimitiveId struct {
	Application string `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	Primitive   string `protobuf:"bytes,2,opt,name=primitive,proto3" json:"primitive,omitempty"`
	Client      string `protobuf:"bytes,3,opt,name=client,proto3" json:"client,omitempty"`
}

func (m *PrimitiveId) Reset()         { *m = PrimitiveId{} }
func (m *PrimitiveId) String() string { return proto.CompactTextString(m) }
func (*PrimitiveId) ProtoMessage()    {}
func (*PrimitiveId) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d19253bc858550a, []int{0}
}
func (m *PrimitiveId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrimitiveId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrimitiveId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrimitiveId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimitiveId.Merge(m, src)
}
func (m *PrimitiveId) XXX_Size() int {
	return m.Size()
}
func (m *PrimitiveId) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimitiveId.DiscardUnknown(m)
}

var xxx_messageInfo_PrimitiveId proto.InternalMessageInfo

func (m *PrimitiveId) GetApplication() string {
	if m != nil {
		return m.Application
	}
	return ""
}

func (m *PrimitiveId) GetPrimitive() string {
	if m != nil {
		return m.Primitive
	}
	return ""
}

func (m *PrimitiveId) GetClient() string {
	if m != nil {
		return m.Client
	}
	return ""
}

type OpenPrimitiveRequest struct {
	PrimitiveId `protobuf:"bytes,1,opt,name=id,proto3,embedded=id" json:"id"`
	Kind        string     `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Config      *types.Any `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *OpenPrimitiveRequest) Reset()         { *m = OpenPrimitiveRequest{} }
func (m *OpenPrimitiveRequest) String() string { return proto.CompactTextString(m) }
func (*OpenPrimitiveRequest) ProtoMessage()    {}
func (*OpenPrimitiveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d19253bc858550a, []int{1}
}
func (m *OpenPrimitiveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenPrimitiveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenPrimitiveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenPrimitiveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenPrimitiveRequest.Merge(m, src)
}
func (m *OpenPrimitiveRequest) XXX_Size() int {
	return m.Size()
}
func (m *OpenPrimitiveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenPrimitiveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OpenPrimitiveRequest proto.InternalMessageInfo

func (m *OpenPrimitiveRequest) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *OpenPrimitiveRequest) GetConfig() *types.Any {
	if m != nil {
		return m.Config
	}
	return nil
}

type OpenPrimitiveResponse struct {
}

func (m *OpenPrimitiveResponse) Reset()         { *m = OpenPrimitiveResponse{} }
func (m *OpenPrimitiveResponse) String() string { return proto.CompactTextString(m) }
func (*OpenPrimitiveResponse) ProtoMessage()    {}
func (*OpenPrimitiveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d19253bc858550a, []int{2}
}
func (m *OpenPrimitiveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenPrimitiveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenPrimitiveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenPrimitiveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenPrimitiveResponse.Merge(m, src)
}
func (m *OpenPrimitiveResponse) XXX_Size() int {
	return m.Size()
}
func (m *OpenPrimitiveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenPrimitiveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OpenPrimitiveResponse proto.InternalMessageInfo

type ClosePrimitiveRequest struct {
	PrimitiveId `protobuf:"bytes,1,opt,name=id,proto3,embedded=id" json:"id"`
}

func (m *ClosePrimitiveRequest) Reset()         { *m = ClosePrimitiveRequest{} }
func (m *ClosePrimitiveRequest) String() string { return proto.CompactTextString(m) }
func (*ClosePrimitiveRequest) ProtoMessage()    {}
func (*ClosePrimitiveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d19253bc858550a, []int{3}
}
func (m *ClosePrimitiveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClosePrimitiveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClosePrimitiveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClosePrimitiveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClosePrimitiveRequest.Merge(m, src)
}
func (m *ClosePrimitiveRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClosePrimitiveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClosePrimitiveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClosePrimitiveRequest proto.InternalMessageInfo

type ClosePrimitiveResponse struct {
}

func (m *ClosePrimitiveResponse) Reset()         { *m = ClosePrimitiveResponse{} }
func (m *ClosePrimitiveResponse) String() string { return proto.CompactTextString(m) }
func (*ClosePrimitiveResponse) ProtoMessage()    {}
func (*ClosePrimitiveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d19253bc858550a, []int{4}
}
func (m *ClosePrimitiveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClosePrimitiveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClosePrimitiveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClosePrimitiveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClosePrimitiveResponse.Merge(m, src)
}
func (m *ClosePrimitiveResponse) XXX_Size() int {
	return m.Size()
}
func (m *ClosePrimitiveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClosePrimitiveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClosePrimitiveResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PrimitiveId)(nil), "atomix.v1.PrimitiveId")
	proto.RegisterType((*OpenPrimitiveRequest)(nil), "atomix.v1.OpenPrimitiveRequest")
	proto.RegisterType((*OpenPrimitiveResponse)(nil), "atomix.v1.OpenPrimitiveResponse")
	proto.RegisterType((*ClosePrimitiveRequest)(nil), "atomix.v1.ClosePrimitiveRequest")
	proto.RegisterType((*ClosePrimitiveResponse)(nil), "atomix.v1.ClosePrimitiveResponse")
}

func init() { proto.RegisterFile("atomix/v1/atomix.proto", fileDescriptor_6d19253bc858550a) }

var fileDescriptor_6d19253bc858550a = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x50, 0xc1, 0x4e, 0xea, 0x40,
	0x14, 0xed, 0xf0, 0x5e, 0x1a, 0xb9, 0x8d, 0x2e, 0x6e, 0xa0, 0xd6, 0xc6, 0x14, 0xec, 0xca, 0x85,
	0x69, 0x05, 0xbf, 0x00, 0x5c, 0xb1, 0xd2, 0x34, 0xf1, 0x03, 0x0a, 0x1d, 0x9a, 0x89, 0x65, 0xa6,
	0xd2, 0x42, 0xe4, 0x17, 0x5c, 0xf9, 0x2f, 0xfe, 0x04, 0x4b, 0x96, 0xae, 0x88, 0x81, 0x1f, 0x31,
	0xce, 0x14, 0x2c, 0x04, 0xdd, 0xb8, 0x3b, 0x73, 0xef, 0x99, 0x73, 0xce, 0x3d, 0x60, 0x86, 0xb9,
	0x18, 0xb1, 0x67, 0x7f, 0xda, 0xf2, 0x15, 0xf2, 0xd2, 0xb1, 0xc8, 0x05, 0x56, 0x8b, 0xd7, 0xb4,
	0x65, 0x9f, 0xc5, 0x42, 0xc4, 0x09, 0xf5, 0xe5, 0xa2, 0x3f, 0x19, 0xfa, 0x21, 0x9f, 0x29, 0x96,
	0x5d, 0x8b, 0x45, 0x2c, 0x24, 0xf4, 0xbf, 0x90, 0x9a, 0xba, 0x14, 0x8c, 0xfb, 0x31, 0x1b, 0xb1,
	0x9c, 0x4d, 0x69, 0x2f, 0xc2, 0x26, 0x18, 0x61, 0x9a, 0x26, 0x6c, 0x10, 0xe6, 0x4c, 0x70, 0x8b,
	0x34, 0xc9, 0x65, 0x35, 0x28, 0x8f, 0xf0, 0x1c, 0xaa, 0xe9, 0xe6, 0x83, 0x55, 0x91, 0xfb, 0xef,
	0x01, 0x9a, 0xa0, 0x0f, 0x12, 0x46, 0x79, 0x6e, 0xfd, 0x93, 0xab, 0xe2, 0xe5, 0xbe, 0x10, 0xa8,
	0xdd, 0xa5, 0x94, 0x6f, 0xbd, 0x02, 0xfa, 0x34, 0xa1, 0x59, 0x8e, 0xd7, 0x50, 0x61, 0x91, 0xf4,
	0x31, 0xda, 0xa6, 0xb7, 0x3d, 0xc4, 0x2b, 0x85, 0xea, 0x1e, 0xcd, 0x97, 0x0d, 0x6d, 0xb1, 0x6c,
	0x90, 0xa0, 0xc2, 0x22, 0x44, 0xf8, 0xff, 0xc8, 0x78, 0x54, 0x78, 0x4b, 0x8c, 0x57, 0xa0, 0x0f,
	0x04, 0x1f, 0xb2, 0x58, 0xda, 0x1a, 0xed, 0x9a, 0xa7, 0x7a, 0xf0, 0x36, 0x3d, 0x78, 0x1d, 0x3e,
	0x0b, 0x0a, 0x8e, 0x7b, 0x0a, 0xf5, 0xbd, 0x2c, 0x59, 0x2a, 0x78, 0x46, 0xdd, 0x1e, 0xd4, 0x6f,
	0x13, 0x91, 0xd1, 0xbf, 0xa7, 0x74, 0x2d, 0x30, 0xf7, 0xa5, 0x94, 0x49, 0xfb, 0x8d, 0x80, 0xde,
	0x91, 0x0a, 0x18, 0xc0, 0xf1, 0x4e, 0x10, 0x6c, 0x94, 0xb4, 0x0f, 0xd5, 0x65, 0x37, 0x7f, 0x26,
	0x28, 0x79, 0x7c, 0x80, 0x93, 0x5d, 0x63, 0x2c, 0xff, 0x39, 0x78, 0x9e, 0x7d, 0xf1, 0x0b, 0x43,
	0xc9, 0x76, 0xad, 0xf9, 0xca, 0x21, 0x8b, 0x95, 0x43, 0x3e, 0x56, 0x0e, 0x79, 0x5d, 0x3b, 0xda,
	0x62, 0xed, 0x68, 0xef, 0x6b, 0x47, 0xeb, 0xeb, 0xb2, 0xe3, 0x9b, 0xcf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xc7, 0x72, 0x30, 0xe2, 0x9e, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AtomixClient is the client API for Atomix service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AtomixClient interface {
	OpenPrimitive(ctx context.Context, in *OpenPrimitiveRequest, opts ...grpc.CallOption) (*OpenPrimitiveResponse, error)
	ClosePrimitive(ctx context.Context, in *ClosePrimitiveRequest, opts ...grpc.CallOption) (*ClosePrimitiveResponse, error)
}

type atomixClient struct {
	cc *grpc.ClientConn
}

func NewAtomixClient(cc *grpc.ClientConn) AtomixClient {
	return &atomixClient{cc}
}

func (c *atomixClient) OpenPrimitive(ctx context.Context, in *OpenPrimitiveRequest, opts ...grpc.CallOption) (*OpenPrimitiveResponse, error) {
	out := new(OpenPrimitiveResponse)
	err := c.cc.Invoke(ctx, "/atomix.v1.Atomix/OpenPrimitive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atomixClient) ClosePrimitive(ctx context.Context, in *ClosePrimitiveRequest, opts ...grpc.CallOption) (*ClosePrimitiveResponse, error) {
	out := new(ClosePrimitiveResponse)
	err := c.cc.Invoke(ctx, "/atomix.v1.Atomix/ClosePrimitive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AtomixServer is the server API for Atomix service.
type AtomixServer interface {
	OpenPrimitive(context.Context, *OpenPrimitiveRequest) (*OpenPrimitiveResponse, error)
	ClosePrimitive(context.Context, *ClosePrimitiveRequest) (*ClosePrimitiveResponse, error)
}

// UnimplementedAtomixServer can be embedded to have forward compatible implementations.
type UnimplementedAtomixServer struct {
}

func (*UnimplementedAtomixServer) OpenPrimitive(ctx context.Context, req *OpenPrimitiveRequest) (*OpenPrimitiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenPrimitive not implemented")
}
func (*UnimplementedAtomixServer) ClosePrimitive(ctx context.Context, req *ClosePrimitiveRequest) (*ClosePrimitiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClosePrimitive not implemented")
}

func RegisterAtomixServer(s *grpc.Server, srv AtomixServer) {
	s.RegisterService(&_Atomix_serviceDesc, srv)
}

func _Atomix_OpenPrimitive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenPrimitiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtomixServer).OpenPrimitive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.v1.Atomix/OpenPrimitive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtomixServer).OpenPrimitive(ctx, req.(*OpenPrimitiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atomix_ClosePrimitive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClosePrimitiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtomixServer).ClosePrimitive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.v1.Atomix/ClosePrimitive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtomixServer).ClosePrimitive(ctx, req.(*ClosePrimitiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Atomix_serviceDesc = grpc.ServiceDesc{
	ServiceName: "atomix.v1.Atomix",
	HandlerType: (*AtomixServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenPrimitive",
			Handler:    _Atomix_OpenPrimitive_Handler,
		},
		{
			MethodName: "ClosePrimitive",
			Handler:    _Atomix_ClosePrimitive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "atomix/v1/atomix.proto",
}

func (m *PrimitiveId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimitiveId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimitiveId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Client) > 0 {
		i -= len(m.Client)
		copy(dAtA[i:], m.Client)
		i = encodeVarintAtomix(dAtA, i, uint64(len(m.Client)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Primitive) > 0 {
		i -= len(m.Primitive)
		copy(dAtA[i:], m.Primitive)
		i = encodeVarintAtomix(dAtA, i, uint64(len(m.Primitive)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Application) > 0 {
		i -= len(m.Application)
		copy(dAtA[i:], m.Application)
		i = encodeVarintAtomix(dAtA, i, uint64(len(m.Application)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OpenPrimitiveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenPrimitiveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenPrimitiveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAtomix(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Kind) > 0 {
		i -= len(m.Kind)
		copy(dAtA[i:], m.Kind)
		i = encodeVarintAtomix(dAtA, i, uint64(len(m.Kind)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.PrimitiveId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAtomix(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *OpenPrimitiveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenPrimitiveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenPrimitiveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ClosePrimitiveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClosePrimitiveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClosePrimitiveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PrimitiveId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAtomix(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClosePrimitiveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClosePrimitiveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClosePrimitiveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintAtomix(dAtA []byte, offset int, v uint64) int {
	offset -= sovAtomix(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PrimitiveId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Application)
	if l > 0 {
		n += 1 + l + sovAtomix(uint64(l))
	}
	l = len(m.Primitive)
	if l > 0 {
		n += 1 + l + sovAtomix(uint64(l))
	}
	l = len(m.Client)
	if l > 0 {
		n += 1 + l + sovAtomix(uint64(l))
	}
	return n
}

func (m *OpenPrimitiveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PrimitiveId.Size()
	n += 1 + l + sovAtomix(uint64(l))
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovAtomix(uint64(l))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovAtomix(uint64(l))
	}
	return n
}

func (m *OpenPrimitiveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ClosePrimitiveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PrimitiveId.Size()
	n += 1 + l + sovAtomix(uint64(l))
	return n
}

func (m *ClosePrimitiveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovAtomix(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAtomix(x uint64) (n int) {
	return sovAtomix(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PrimitiveId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAtomix
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrimitiveId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrimitiveId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtomix
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAtomix
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAtomix
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Application = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Primitive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtomix
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAtomix
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAtomix
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Primitive = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtomix
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAtomix
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAtomix
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Client = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAtomix(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAtomix
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenPrimitiveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAtomix
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenPrimitiveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenPrimitiveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimitiveId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtomix
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAtomix
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAtomix
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrimitiveId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtomix
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAtomix
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAtomix
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtomix
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAtomix
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAtomix
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &types.Any{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAtomix(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAtomix
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenPrimitiveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAtomix
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenPrimitiveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenPrimitiveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAtomix(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAtomix
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClosePrimitiveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAtomix
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClosePrimitiveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClosePrimitiveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimitiveId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtomix
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAtomix
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAtomix
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrimitiveId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAtomix(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAtomix
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClosePrimitiveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAtomix
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClosePrimitiveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClosePrimitiveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAtomix(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAtomix
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAtomix(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAtomix
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAtomix
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAtomix
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAtomix
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAtomix
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAtomix
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAtomix        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAtomix          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAtomix = fmt.Errorf("proto: unexpected end of group")
)
