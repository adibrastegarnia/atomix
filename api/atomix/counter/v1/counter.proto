/*
SPDX-FileCopyrightText: 2022-present Open Networking Foundation <info@opennetworking.org>

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package atomix.counter.v1;

import "atomix/primitive/v1/descriptor.proto";
import "atomix/primitive/v1/primitive.proto";
import "gogoproto/gogo.proto";

// Counter is a service for a counter primitive
service Counter {
    // Create creates the counter
    rpc Create (CreateRequest) returns (CreateResponse) {
        option (atomix.primitive.v1.operation_id) = 1;
        option (atomix.primitive.v1.operation_type) = CREATE;
    }

    // Close closes the counter
    rpc Close (CloseRequest) returns (CloseResponse) {
        option (atomix.primitive.v1.operation_id) = 2;
        option (atomix.primitive.v1.operation_type) = CLOSE;
    }

    // Set sets the counter value
    rpc Set (SetRequest) returns (SetResponse) {
        option (atomix.primitive.v1.operation_id) = 3;
        option (atomix.primitive.v1.operation_type) = COMMAND;
    }

    // Get gets the current counter value
    rpc Get (GetRequest) returns (GetResponse) {
        option (atomix.primitive.v1.operation_id) = 4;
        option (atomix.primitive.v1.operation_type) = QUERY;
    }

    // Increment increments the counter value
    rpc Increment (IncrementRequest) returns (IncrementResponse) {
        option (atomix.primitive.v1.operation_id) = 5;
        option (atomix.primitive.v1.operation_type) = COMMAND;
    }

    // Decrement decrements the counter value
    rpc Decrement (DecrementRequest) returns (DecrementResponse) {
        option (atomix.primitive.v1.operation_id) = 6;
        option (atomix.primitive.v1.operation_type) = COMMAND;
    }
}

message CreateRequest {
    atomix.primitive.v1.PrimitiveId id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    map<string, string> tags = 2;
}

message CreateResponse {

}

message CloseRequest {
    atomix.primitive.v1.PrimitiveId id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
}

message CloseResponse {

}

message IncrementRequest {
    atomix.primitive.v1.PrimitiveId id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    int64 delta = 2;
}

message IncrementResponse {
    int64 value = 1;
}

message DecrementRequest {
    atomix.primitive.v1.PrimitiveId id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    int64 delta = 2;
}

message DecrementResponse {
    int64 value = 1;
}

message GetRequest {
    atomix.primitive.v1.PrimitiveId id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
}

message GetResponse {
    int64 value = 1;
}

message Precondition {
    oneof precondition {
        int64 value = 1;
    }
}

message SetRequest {
    atomix.primitive.v1.PrimitiveId id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    int64 value = 2;
    repeated Precondition preconditions = 3 [
        (gogoproto.nullable) = false
    ];
}

message SetResponse {
    int64 value = 1;
}

message Value {
    int64 value = 1;
}
