// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/runtime/v1/runtime.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ConnectionInfo struct {
	Driver DriverInfo `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver"`
	Config []byte     `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *ConnectionInfo) Reset()         { *m = ConnectionInfo{} }
func (m *ConnectionInfo) String() string { return proto.CompactTextString(m) }
func (*ConnectionInfo) ProtoMessage()    {}
func (*ConnectionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d426e124a0fc8e61, []int{0}
}
func (m *ConnectionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionInfo.Merge(m, src)
}
func (m *ConnectionInfo) XXX_Size() int {
	return m.Size()
}
func (m *ConnectionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionInfo proto.InternalMessageInfo

func (m *ConnectionInfo) GetDriver() DriverInfo {
	if m != nil {
		return m.Driver
	}
	return DriverInfo{}
}

func (m *ConnectionInfo) GetConfig() []byte {
	if m != nil {
		return m.Config
	}
	return nil
}

type ConnectClusterRequest struct {
	Cluster    string          `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Connection *ConnectionInfo `protobuf:"bytes,2,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (m *ConnectClusterRequest) Reset()         { *m = ConnectClusterRequest{} }
func (m *ConnectClusterRequest) String() string { return proto.CompactTextString(m) }
func (*ConnectClusterRequest) ProtoMessage()    {}
func (*ConnectClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d426e124a0fc8e61, []int{1}
}
func (m *ConnectClusterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectClusterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectClusterRequest.Merge(m, src)
}
func (m *ConnectClusterRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConnectClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectClusterRequest proto.InternalMessageInfo

func (m *ConnectClusterRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *ConnectClusterRequest) GetConnection() *ConnectionInfo {
	if m != nil {
		return m.Connection
	}
	return nil
}

type ConnectClusterResponse struct {
}

func (m *ConnectClusterResponse) Reset()         { *m = ConnectClusterResponse{} }
func (m *ConnectClusterResponse) String() string { return proto.CompactTextString(m) }
func (*ConnectClusterResponse) ProtoMessage()    {}
func (*ConnectClusterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d426e124a0fc8e61, []int{2}
}
func (m *ConnectClusterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectClusterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectClusterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectClusterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectClusterResponse.Merge(m, src)
}
func (m *ConnectClusterResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConnectClusterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectClusterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectClusterResponse proto.InternalMessageInfo

type ConfigureClusterRequest struct {
	Cluster    string          `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Connection *ConnectionInfo `protobuf:"bytes,2,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (m *ConfigureClusterRequest) Reset()         { *m = ConfigureClusterRequest{} }
func (m *ConfigureClusterRequest) String() string { return proto.CompactTextString(m) }
func (*ConfigureClusterRequest) ProtoMessage()    {}
func (*ConfigureClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d426e124a0fc8e61, []int{3}
}
func (m *ConfigureClusterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigureClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigureClusterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigureClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigureClusterRequest.Merge(m, src)
}
func (m *ConfigureClusterRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConfigureClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigureClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigureClusterRequest proto.InternalMessageInfo

func (m *ConfigureClusterRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *ConfigureClusterRequest) GetConnection() *ConnectionInfo {
	if m != nil {
		return m.Connection
	}
	return nil
}

type ConfigureClusterResponse struct {
}

func (m *ConfigureClusterResponse) Reset()         { *m = ConfigureClusterResponse{} }
func (m *ConfigureClusterResponse) String() string { return proto.CompactTextString(m) }
func (*ConfigureClusterResponse) ProtoMessage()    {}
func (*ConfigureClusterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d426e124a0fc8e61, []int{4}
}
func (m *ConfigureClusterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigureClusterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigureClusterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigureClusterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigureClusterResponse.Merge(m, src)
}
func (m *ConfigureClusterResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConfigureClusterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigureClusterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigureClusterResponse proto.InternalMessageInfo

type DisconnectClusterRequest struct {
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (m *DisconnectClusterRequest) Reset()         { *m = DisconnectClusterRequest{} }
func (m *DisconnectClusterRequest) String() string { return proto.CompactTextString(m) }
func (*DisconnectClusterRequest) ProtoMessage()    {}
func (*DisconnectClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d426e124a0fc8e61, []int{5}
}
func (m *DisconnectClusterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisconnectClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DisconnectClusterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DisconnectClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisconnectClusterRequest.Merge(m, src)
}
func (m *DisconnectClusterRequest) XXX_Size() int {
	return m.Size()
}
func (m *DisconnectClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DisconnectClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DisconnectClusterRequest proto.InternalMessageInfo

func (m *DisconnectClusterRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

type DisconnectClusterResponse struct {
}

func (m *DisconnectClusterResponse) Reset()         { *m = DisconnectClusterResponse{} }
func (m *DisconnectClusterResponse) String() string { return proto.CompactTextString(m) }
func (*DisconnectClusterResponse) ProtoMessage()    {}
func (*DisconnectClusterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d426e124a0fc8e61, []int{6}
}
func (m *DisconnectClusterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisconnectClusterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DisconnectClusterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DisconnectClusterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisconnectClusterResponse.Merge(m, src)
}
func (m *DisconnectClusterResponse) XXX_Size() int {
	return m.Size()
}
func (m *DisconnectClusterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DisconnectClusterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DisconnectClusterResponse proto.InternalMessageInfo

type InstallDriverRequest struct {
	// Types that are valid to be assigned to Driver:
	//	*InstallDriverRequest_Header
	//	*InstallDriverRequest_Chunk
	//	*InstallDriverRequest_Trailer
	Driver isInstallDriverRequest_Driver `protobuf_oneof:"driver"`
}

func (m *InstallDriverRequest) Reset()         { *m = InstallDriverRequest{} }
func (m *InstallDriverRequest) String() string { return proto.CompactTextString(m) }
func (*InstallDriverRequest) ProtoMessage()    {}
func (*InstallDriverRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d426e124a0fc8e61, []int{7}
}
func (m *InstallDriverRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstallDriverRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstallDriverRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstallDriverRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallDriverRequest.Merge(m, src)
}
func (m *InstallDriverRequest) XXX_Size() int {
	return m.Size()
}
func (m *InstallDriverRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallDriverRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InstallDriverRequest proto.InternalMessageInfo

type isInstallDriverRequest_Driver interface {
	isInstallDriverRequest_Driver()
	MarshalTo([]byte) (int, error)
	Size() int
}

type InstallDriverRequest_Header struct {
	Header *DriverHeader `protobuf:"bytes,1,opt,name=header,proto3,oneof" json:"header,omitempty"`
}
type InstallDriverRequest_Chunk struct {
	Chunk *DriverChunk `protobuf:"bytes,2,opt,name=chunk,proto3,oneof" json:"chunk,omitempty"`
}
type InstallDriverRequest_Trailer struct {
	Trailer *DriverTrailer `protobuf:"bytes,3,opt,name=trailer,proto3,oneof" json:"trailer,omitempty"`
}

func (*InstallDriverRequest_Header) isInstallDriverRequest_Driver()  {}
func (*InstallDriverRequest_Chunk) isInstallDriverRequest_Driver()   {}
func (*InstallDriverRequest_Trailer) isInstallDriverRequest_Driver() {}

func (m *InstallDriverRequest) GetDriver() isInstallDriverRequest_Driver {
	if m != nil {
		return m.Driver
	}
	return nil
}

func (m *InstallDriverRequest) GetHeader() *DriverHeader {
	if x, ok := m.GetDriver().(*InstallDriverRequest_Header); ok {
		return x.Header
	}
	return nil
}

func (m *InstallDriverRequest) GetChunk() *DriverChunk {
	if x, ok := m.GetDriver().(*InstallDriverRequest_Chunk); ok {
		return x.Chunk
	}
	return nil
}

func (m *InstallDriverRequest) GetTrailer() *DriverTrailer {
	if x, ok := m.GetDriver().(*InstallDriverRequest_Trailer); ok {
		return x.Trailer
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*InstallDriverRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*InstallDriverRequest_Header)(nil),
		(*InstallDriverRequest_Chunk)(nil),
		(*InstallDriverRequest_Trailer)(nil),
	}
}

type InstallDriverResponse struct {
}

func (m *InstallDriverResponse) Reset()         { *m = InstallDriverResponse{} }
func (m *InstallDriverResponse) String() string { return proto.CompactTextString(m) }
func (*InstallDriverResponse) ProtoMessage()    {}
func (*InstallDriverResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d426e124a0fc8e61, []int{8}
}
func (m *InstallDriverResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstallDriverResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstallDriverResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstallDriverResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallDriverResponse.Merge(m, src)
}
func (m *InstallDriverResponse) XXX_Size() int {
	return m.Size()
}
func (m *InstallDriverResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallDriverResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InstallDriverResponse proto.InternalMessageInfo

type DriverHeader struct {
	Driver DriverInfo `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver"`
}

func (m *DriverHeader) Reset()         { *m = DriverHeader{} }
func (m *DriverHeader) String() string { return proto.CompactTextString(m) }
func (*DriverHeader) ProtoMessage()    {}
func (*DriverHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_d426e124a0fc8e61, []int{9}
}
func (m *DriverHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DriverHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DriverHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DriverHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriverHeader.Merge(m, src)
}
func (m *DriverHeader) XXX_Size() int {
	return m.Size()
}
func (m *DriverHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_DriverHeader.DiscardUnknown(m)
}

var xxx_messageInfo_DriverHeader proto.InternalMessageInfo

func (m *DriverHeader) GetDriver() DriverInfo {
	if m != nil {
		return m.Driver
	}
	return DriverInfo{}
}

type DriverChunk struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *DriverChunk) Reset()         { *m = DriverChunk{} }
func (m *DriverChunk) String() string { return proto.CompactTextString(m) }
func (*DriverChunk) ProtoMessage()    {}
func (*DriverChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_d426e124a0fc8e61, []int{10}
}
func (m *DriverChunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DriverChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DriverChunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DriverChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriverChunk.Merge(m, src)
}
func (m *DriverChunk) XXX_Size() int {
	return m.Size()
}
func (m *DriverChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_DriverChunk.DiscardUnknown(m)
}

var xxx_messageInfo_DriverChunk proto.InternalMessageInfo

func (m *DriverChunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type DriverTrailer struct {
	Checksum string `protobuf:"bytes,1,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (m *DriverTrailer) Reset()         { *m = DriverTrailer{} }
func (m *DriverTrailer) String() string { return proto.CompactTextString(m) }
func (*DriverTrailer) ProtoMessage()    {}
func (*DriverTrailer) Descriptor() ([]byte, []int) {
	return fileDescriptor_d426e124a0fc8e61, []int{11}
}
func (m *DriverTrailer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DriverTrailer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DriverTrailer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DriverTrailer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriverTrailer.Merge(m, src)
}
func (m *DriverTrailer) XXX_Size() int {
	return m.Size()
}
func (m *DriverTrailer) XXX_DiscardUnknown() {
	xxx_messageInfo_DriverTrailer.DiscardUnknown(m)
}

var xxx_messageInfo_DriverTrailer proto.InternalMessageInfo

func (m *DriverTrailer) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

type DriverInfo struct {
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *DriverInfo) Reset()         { *m = DriverInfo{} }
func (m *DriverInfo) String() string { return proto.CompactTextString(m) }
func (*DriverInfo) ProtoMessage()    {}
func (*DriverInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d426e124a0fc8e61, []int{12}
}
func (m *DriverInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DriverInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DriverInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DriverInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriverInfo.Merge(m, src)
}
func (m *DriverInfo) XXX_Size() int {
	return m.Size()
}
func (m *DriverInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DriverInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DriverInfo proto.InternalMessageInfo

func (m *DriverInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DriverInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func init() {
	proto.RegisterType((*ConnectionInfo)(nil), "atomix.runtime.v1.ConnectionInfo")
	proto.RegisterType((*ConnectClusterRequest)(nil), "atomix.runtime.v1.ConnectClusterRequest")
	proto.RegisterType((*ConnectClusterResponse)(nil), "atomix.runtime.v1.ConnectClusterResponse")
	proto.RegisterType((*ConfigureClusterRequest)(nil), "atomix.runtime.v1.ConfigureClusterRequest")
	proto.RegisterType((*ConfigureClusterResponse)(nil), "atomix.runtime.v1.ConfigureClusterResponse")
	proto.RegisterType((*DisconnectClusterRequest)(nil), "atomix.runtime.v1.DisconnectClusterRequest")
	proto.RegisterType((*DisconnectClusterResponse)(nil), "atomix.runtime.v1.DisconnectClusterResponse")
	proto.RegisterType((*InstallDriverRequest)(nil), "atomix.runtime.v1.InstallDriverRequest")
	proto.RegisterType((*InstallDriverResponse)(nil), "atomix.runtime.v1.InstallDriverResponse")
	proto.RegisterType((*DriverHeader)(nil), "atomix.runtime.v1.DriverHeader")
	proto.RegisterType((*DriverChunk)(nil), "atomix.runtime.v1.DriverChunk")
	proto.RegisterType((*DriverTrailer)(nil), "atomix.runtime.v1.DriverTrailer")
	proto.RegisterType((*DriverInfo)(nil), "atomix.runtime.v1.DriverInfo")
}

func init() { proto.RegisterFile("atomix/runtime/v1/runtime.proto", fileDescriptor_d426e124a0fc8e61) }

var fileDescriptor_d426e124a0fc8e61 = []byte{
	// 525 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0xb5, 0x69, 0x49, 0xda, 0x9b, 0x14, 0xd1, 0x51, 0x1f, 0xc6, 0x08, 0x27, 0x9d, 0x0d, 0x81,
	0xa2, 0x44, 0x0d, 0x08, 0x89, 0xc7, 0x86, 0xa4, 0x8b, 0x54, 0xec, 0x46, 0xfc, 0x80, 0x71, 0xa6,
	0x89, 0x95, 0x64, 0xa6, 0x8c, 0xc7, 0x16, 0x9f, 0xc1, 0xbf, 0xf0, 0x13, 0x5d, 0x96, 0x1d, 0x2b,
	0x84, 0x92, 0x1f, 0x41, 0x9e, 0x19, 0xa7, 0x79, 0xd8, 0x22, 0x08, 0xa9, 0xbb, 0xb9, 0xce, 0x39,
	0xf7, 0x9c, 0x99, 0x7b, 0x6e, 0xa0, 0xe6, 0x4b, 0x3e, 0x09, 0xbf, 0xb6, 0x44, 0xcc, 0x64, 0x38,
	0xa1, 0xad, 0xe4, 0x2c, 0x3b, 0x36, 0xaf, 0x04, 0x97, 0x1c, 0xed, 0x6b, 0x40, 0x33, 0xfb, 0x9a,
	0x9c, 0xb9, 0x07, 0x03, 0x3e, 0xe0, 0xea, 0xd7, 0x56, 0x7a, 0xd2, 0x40, 0x4c, 0xe1, 0x41, 0x97,
	0x33, 0x46, 0x03, 0x19, 0x72, 0x76, 0xc1, 0x2e, 0x39, 0x7a, 0x07, 0xa5, 0xbe, 0x08, 0x13, 0x2a,
	0x1c, 0xbb, 0x6e, 0x37, 0x2a, 0xed, 0x27, 0xcd, 0xb5, 0x5e, 0xcd, 0x73, 0x05, 0x48, 0xe1, 0x9d,
	0xed, 0xeb, 0x5f, 0x35, 0x8b, 0x18, 0x0a, 0x3a, 0x82, 0x52, 0xc0, 0xd9, 0x65, 0x38, 0x70, 0xee,
	0xd5, 0xed, 0x46, 0x95, 0x98, 0x0a, 0x4b, 0x38, 0x34, 0x32, 0xdd, 0x71, 0x1c, 0x49, 0x2a, 0x08,
	0xfd, 0x12, 0xd3, 0x48, 0x22, 0x07, 0xca, 0x81, 0xfe, 0xa2, 0xe4, 0x76, 0x49, 0x56, 0xa2, 0x0f,
	0x00, 0xc1, 0xdc, 0x99, 0x6a, 0x57, 0x69, 0x9f, 0xe4, 0x78, 0x59, 0xb6, 0x4f, 0x16, 0x48, 0xd8,
	0x81, 0xa3, 0x55, 0xd5, 0xe8, 0x8a, 0xb3, 0x88, 0xe2, 0x04, 0x8e, 0xbb, 0xca, 0x59, 0x2c, 0xe8,
	0x5d, 0x3a, 0x72, 0xc1, 0x59, 0xd7, 0x35, 0x9e, 0x5e, 0x81, 0x73, 0x1e, 0x46, 0xc1, 0xbf, 0x3d,
	0x13, 0x7e, 0x0c, 0x8f, 0x72, 0x58, 0xa6, 0xe5, 0x0f, 0x1b, 0x0e, 0x2e, 0x58, 0x24, 0xfd, 0xf1,
	0x58, 0x8f, 0x2c, 0xeb, 0xf7, 0x06, 0x4a, 0x43, 0xea, 0xf7, 0xe7, 0x43, 0xae, 0x15, 0x0e, 0xb9,
	0xa7, 0x60, 0x3d, 0x8b, 0x18, 0x02, 0x7a, 0x0d, 0xf7, 0x83, 0x61, 0xcc, 0x46, 0xe6, 0x01, 0xbc,
	0x42, 0x66, 0x37, 0x45, 0xf5, 0x2c, 0xa2, 0xe1, 0xe8, 0x3d, 0x94, 0xa5, 0xf0, 0xc3, 0x31, 0x15,
	0xce, 0x96, 0x62, 0xd6, 0x0b, 0x99, 0x9f, 0x34, 0xae, 0x67, 0x91, 0x8c, 0xd2, 0xd9, 0xc9, 0x52,
	0x89, 0x8f, 0xe1, 0x70, 0xe5, 0x4a, 0xe6, 0xb2, 0x1f, 0xa1, 0xba, 0x68, 0xf9, 0xbf, 0x82, 0x8c,
	0x4f, 0xa0, 0xb2, 0x70, 0x0b, 0x84, 0x60, 0xbb, 0xef, 0x4b, 0x5f, 0x75, 0xaa, 0x12, 0x75, 0xc6,
	0xa7, 0xb0, 0xb7, 0x64, 0x17, 0xb9, 0xb0, 0x13, 0x0c, 0x69, 0x30, 0x8a, 0xe2, 0x89, 0x99, 0xd2,
	0xbc, 0xc6, 0x6f, 0x01, 0x6e, 0xb5, 0xd2, 0x76, 0xcc, 0x9f, 0x50, 0x83, 0x52, 0xe7, 0x74, 0xc4,
	0x09, 0x15, 0x51, 0x16, 0xad, 0x5d, 0x92, 0x95, 0xed, 0xef, 0x5b, 0x50, 0x26, 0xda, 0x33, 0xba,
	0xdd, 0x57, 0x33, 0x6b, 0xd4, 0x28, 0x4e, 0xe0, 0x72, 0x88, 0xdc, 0x67, 0x1b, 0x20, 0xf5, 0x5b,
	0xa2, 0x11, 0x3c, 0x5c, 0xcd, 0x29, 0x7a, 0x9e, 0x4f, 0xcf, 0x5b, 0x22, 0xf7, 0x74, 0x23, 0xac,
	0x11, 0x63, 0xb0, 0xbf, 0x16, 0x61, 0x94, 0xd7, 0xa1, 0x68, 0x3d, 0xdc, 0x17, 0x9b, 0x81, 0x8d,
	0x5e, 0x1f, 0xf6, 0x96, 0x12, 0x84, 0x9e, 0xe6, 0xd0, 0xf3, 0xd6, 0xc6, 0x6d, 0xfc, 0x1d, 0xa8,
	0x35, 0x1a, 0x76, 0xc7, 0xb9, 0x9e, 0x7a, 0xf6, 0xcd, 0xd4, 0xb3, 0x7f, 0x4f, 0x3d, 0xfb, 0xdb,
	0xcc, 0xb3, 0x6e, 0x66, 0x9e, 0xf5, 0x73, 0xe6, 0x59, 0x9f, 0x4b, 0xea, 0xaf, 0xf7, 0xe5, 0x9f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x42, 0x23, 0x65, 0xc6, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RuntimeClient is the client API for Runtime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RuntimeClient interface {
	ConnectCluster(ctx context.Context, in *ConnectClusterRequest, opts ...grpc.CallOption) (*ConnectClusterResponse, error)
	ConfigureCluster(ctx context.Context, in *ConfigureClusterRequest, opts ...grpc.CallOption) (*ConfigureClusterResponse, error)
	DisconnectCluster(ctx context.Context, in *DisconnectClusterRequest, opts ...grpc.CallOption) (*DisconnectClusterResponse, error)
	InstallDriver(ctx context.Context, opts ...grpc.CallOption) (Runtime_InstallDriverClient, error)
}

type runtimeClient struct {
	cc *grpc.ClientConn
}

func NewRuntimeClient(cc *grpc.ClientConn) RuntimeClient {
	return &runtimeClient{cc}
}

func (c *runtimeClient) ConnectCluster(ctx context.Context, in *ConnectClusterRequest, opts ...grpc.CallOption) (*ConnectClusterResponse, error) {
	out := new(ConnectClusterResponse)
	err := c.cc.Invoke(ctx, "/atomix.runtime.v1.Runtime/ConnectCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) ConfigureCluster(ctx context.Context, in *ConfigureClusterRequest, opts ...grpc.CallOption) (*ConfigureClusterResponse, error) {
	out := new(ConfigureClusterResponse)
	err := c.cc.Invoke(ctx, "/atomix.runtime.v1.Runtime/ConfigureCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) DisconnectCluster(ctx context.Context, in *DisconnectClusterRequest, opts ...grpc.CallOption) (*DisconnectClusterResponse, error) {
	out := new(DisconnectClusterResponse)
	err := c.cc.Invoke(ctx, "/atomix.runtime.v1.Runtime/DisconnectCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) InstallDriver(ctx context.Context, opts ...grpc.CallOption) (Runtime_InstallDriverClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Runtime_serviceDesc.Streams[0], "/atomix.runtime.v1.Runtime/InstallDriver", opts...)
	if err != nil {
		return nil, err
	}
	x := &runtimeInstallDriverClient{stream}
	return x, nil
}

type Runtime_InstallDriverClient interface {
	Send(*InstallDriverRequest) error
	CloseAndRecv() (*InstallDriverResponse, error)
	grpc.ClientStream
}

type runtimeInstallDriverClient struct {
	grpc.ClientStream
}

func (x *runtimeInstallDriverClient) Send(m *InstallDriverRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *runtimeInstallDriverClient) CloseAndRecv() (*InstallDriverResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(InstallDriverResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RuntimeServer is the server API for Runtime service.
type RuntimeServer interface {
	ConnectCluster(context.Context, *ConnectClusterRequest) (*ConnectClusterResponse, error)
	ConfigureCluster(context.Context, *ConfigureClusterRequest) (*ConfigureClusterResponse, error)
	DisconnectCluster(context.Context, *DisconnectClusterRequest) (*DisconnectClusterResponse, error)
	InstallDriver(Runtime_InstallDriverServer) error
}

// UnimplementedRuntimeServer can be embedded to have forward compatible implementations.
type UnimplementedRuntimeServer struct {
}

func (*UnimplementedRuntimeServer) ConnectCluster(ctx context.Context, req *ConnectClusterRequest) (*ConnectClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectCluster not implemented")
}
func (*UnimplementedRuntimeServer) ConfigureCluster(ctx context.Context, req *ConfigureClusterRequest) (*ConfigureClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureCluster not implemented")
}
func (*UnimplementedRuntimeServer) DisconnectCluster(ctx context.Context, req *DisconnectClusterRequest) (*DisconnectClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectCluster not implemented")
}
func (*UnimplementedRuntimeServer) InstallDriver(srv Runtime_InstallDriverServer) error {
	return status.Errorf(codes.Unimplemented, "method InstallDriver not implemented")
}

func RegisterRuntimeServer(s *grpc.Server, srv RuntimeServer) {
	s.RegisterService(&_Runtime_serviceDesc, srv)
}

func _Runtime_ConnectCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).ConnectCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.runtime.v1.Runtime/ConnectCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).ConnectCluster(ctx, req.(*ConnectClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_ConfigureCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).ConfigureCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.runtime.v1.Runtime/ConfigureCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).ConfigureCluster(ctx, req.(*ConfigureClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_DisconnectCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).DisconnectCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.runtime.v1.Runtime/DisconnectCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).DisconnectCluster(ctx, req.(*DisconnectClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_InstallDriver_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RuntimeServer).InstallDriver(&runtimeInstallDriverServer{stream})
}

type Runtime_InstallDriverServer interface {
	SendAndClose(*InstallDriverResponse) error
	Recv() (*InstallDriverRequest, error)
	grpc.ServerStream
}

type runtimeInstallDriverServer struct {
	grpc.ServerStream
}

func (x *runtimeInstallDriverServer) SendAndClose(m *InstallDriverResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *runtimeInstallDriverServer) Recv() (*InstallDriverRequest, error) {
	m := new(InstallDriverRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Runtime_serviceDesc = grpc.ServiceDesc{
	ServiceName: "atomix.runtime.v1.Runtime",
	HandlerType: (*RuntimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConnectCluster",
			Handler:    _Runtime_ConnectCluster_Handler,
		},
		{
			MethodName: "ConfigureCluster",
			Handler:    _Runtime_ConfigureCluster_Handler,
		},
		{
			MethodName: "DisconnectCluster",
			Handler:    _Runtime_DisconnectCluster_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InstallDriver",
			Handler:       _Runtime_InstallDriver_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "atomix/runtime/v1/runtime.proto",
}

func (m *ConnectionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Config) > 0 {
		i -= len(m.Config)
		copy(dAtA[i:], m.Config)
		i = encodeVarintRuntime(dAtA, i, uint64(len(m.Config)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Driver.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRuntime(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ConnectClusterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectClusterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectClusterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Connection != nil {
		{
			size, err := m.Connection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRuntime(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cluster) > 0 {
		i -= len(m.Cluster)
		copy(dAtA[i:], m.Cluster)
		i = encodeVarintRuntime(dAtA, i, uint64(len(m.Cluster)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConnectClusterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectClusterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectClusterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ConfigureClusterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigureClusterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigureClusterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Connection != nil {
		{
			size, err := m.Connection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRuntime(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cluster) > 0 {
		i -= len(m.Cluster)
		copy(dAtA[i:], m.Cluster)
		i = encodeVarintRuntime(dAtA, i, uint64(len(m.Cluster)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfigureClusterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigureClusterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigureClusterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DisconnectClusterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisconnectClusterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisconnectClusterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cluster) > 0 {
		i -= len(m.Cluster)
		copy(dAtA[i:], m.Cluster)
		i = encodeVarintRuntime(dAtA, i, uint64(len(m.Cluster)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DisconnectClusterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisconnectClusterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisconnectClusterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *InstallDriverRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstallDriverRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstallDriverRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Driver != nil {
		{
			size := m.Driver.Size()
			i -= size
			if _, err := m.Driver.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *InstallDriverRequest_Header) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstallDriverRequest_Header) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRuntime(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *InstallDriverRequest_Chunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstallDriverRequest_Chunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Chunk != nil {
		{
			size, err := m.Chunk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRuntime(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *InstallDriverRequest_Trailer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstallDriverRequest_Trailer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Trailer != nil {
		{
			size, err := m.Trailer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRuntime(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *InstallDriverResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstallDriverResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstallDriverResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DriverHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DriverHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DriverHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Driver.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRuntime(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DriverChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DriverChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DriverChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintRuntime(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DriverTrailer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DriverTrailer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DriverTrailer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Checksum) > 0 {
		i -= len(m.Checksum)
		copy(dAtA[i:], m.Checksum)
		i = encodeVarintRuntime(dAtA, i, uint64(len(m.Checksum)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DriverInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DriverInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DriverInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintRuntime(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRuntime(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRuntime(dAtA []byte, offset int, v uint64) int {
	offset -= sovRuntime(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ConnectionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Driver.Size()
	n += 1 + l + sovRuntime(uint64(l))
	l = len(m.Config)
	if l > 0 {
		n += 1 + l + sovRuntime(uint64(l))
	}
	return n
}

func (m *ConnectClusterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cluster)
	if l > 0 {
		n += 1 + l + sovRuntime(uint64(l))
	}
	if m.Connection != nil {
		l = m.Connection.Size()
		n += 1 + l + sovRuntime(uint64(l))
	}
	return n
}

func (m *ConnectClusterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ConfigureClusterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cluster)
	if l > 0 {
		n += 1 + l + sovRuntime(uint64(l))
	}
	if m.Connection != nil {
		l = m.Connection.Size()
		n += 1 + l + sovRuntime(uint64(l))
	}
	return n
}

func (m *ConfigureClusterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DisconnectClusterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cluster)
	if l > 0 {
		n += 1 + l + sovRuntime(uint64(l))
	}
	return n
}

func (m *DisconnectClusterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *InstallDriverRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Driver != nil {
		n += m.Driver.Size()
	}
	return n
}

func (m *InstallDriverRequest_Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovRuntime(uint64(l))
	}
	return n
}
func (m *InstallDriverRequest_Chunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Chunk != nil {
		l = m.Chunk.Size()
		n += 1 + l + sovRuntime(uint64(l))
	}
	return n
}
func (m *InstallDriverRequest_Trailer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Trailer != nil {
		l = m.Trailer.Size()
		n += 1 + l + sovRuntime(uint64(l))
	}
	return n
}
func (m *InstallDriverResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DriverHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Driver.Size()
	n += 1 + l + sovRuntime(uint64(l))
	return n
}

func (m *DriverChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRuntime(uint64(l))
	}
	return n
}

func (m *DriverTrailer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Checksum)
	if l > 0 {
		n += 1 + l + sovRuntime(uint64(l))
	}
	return n
}

func (m *DriverInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRuntime(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovRuntime(uint64(l))
	}
	return n
}

func sovRuntime(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRuntime(x uint64) (n int) {
	return sovRuntime(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ConnectionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRuntime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Driver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Driver.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Config = append(m.Config[:0], dAtA[iNdEx:postIndex]...)
			if m.Config == nil {
				m.Config = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRuntime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRuntime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectClusterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRuntime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectClusterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectClusterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Connection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Connection == nil {
				m.Connection = &ConnectionInfo{}
			}
			if err := m.Connection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRuntime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRuntime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectClusterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRuntime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectClusterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectClusterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRuntime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRuntime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigureClusterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRuntime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigureClusterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigureClusterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Connection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Connection == nil {
				m.Connection = &ConnectionInfo{}
			}
			if err := m.Connection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRuntime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRuntime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigureClusterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRuntime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigureClusterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigureClusterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRuntime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRuntime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisconnectClusterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRuntime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisconnectClusterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisconnectClusterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRuntime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRuntime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisconnectClusterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRuntime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisconnectClusterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisconnectClusterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRuntime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRuntime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstallDriverRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRuntime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstallDriverRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstallDriverRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DriverHeader{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Driver = &InstallDriverRequest_Header{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DriverChunk{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Driver = &InstallDriverRequest_Chunk{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trailer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DriverTrailer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Driver = &InstallDriverRequest_Trailer{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRuntime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRuntime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstallDriverResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRuntime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstallDriverResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstallDriverResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRuntime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRuntime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DriverHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRuntime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DriverHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DriverHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Driver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Driver.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRuntime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRuntime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DriverChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRuntime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DriverChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DriverChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRuntime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRuntime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DriverTrailer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRuntime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DriverTrailer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DriverTrailer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRuntime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRuntime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DriverInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRuntime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DriverInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DriverInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRuntime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRuntime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRuntime(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRuntime
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRuntime
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRuntime
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRuntime
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRuntime        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRuntime          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRuntime = fmt.Errorf("proto: unexpected end of group")
)
