// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/runtime/v1/proxy.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProxyStatus_State int32

const (
	ProxyStatus_NONE    ProxyStatus_State = 0
	ProxyStatus_OPENING ProxyStatus_State = 1
	ProxyStatus_OPENED  ProxyStatus_State = 2
	ProxyStatus_CLOSING ProxyStatus_State = 3
	ProxyStatus_CLOSED  ProxyStatus_State = 4
)

var ProxyStatus_State_name = map[int32]string{
	0: "NONE",
	1: "OPENING",
	2: "OPENED",
	3: "CLOSING",
	4: "CLOSED",
}

var ProxyStatus_State_value = map[string]int32{
	"NONE":    0,
	"OPENING": 1,
	"OPENED":  2,
	"CLOSING": 3,
	"CLOSED":  4,
}

func (x ProxyStatus_State) String() string {
	return proto.EnumName(ProxyStatus_State_name, int32(x))
}

func (ProxyStatus_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2e3b2cb01e4d98b4, []int{4, 0}
}

type ProxyId struct {
	Application string `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	Primitive   string `protobuf:"bytes,2,opt,name=primitive,proto3" json:"primitive,omitempty"`
	Client      string `protobuf:"bytes,3,opt,name=client,proto3" json:"client,omitempty"`
}

func (m *ProxyId) Reset()         { *m = ProxyId{} }
func (m *ProxyId) String() string { return proto.CompactTextString(m) }
func (*ProxyId) ProtoMessage()    {}
func (*ProxyId) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e3b2cb01e4d98b4, []int{0}
}
func (m *ProxyId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProxyId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProxyId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProxyId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProxyId.Merge(m, src)
}
func (m *ProxyId) XXX_Size() int {
	return m.Size()
}
func (m *ProxyId) XXX_DiscardUnknown() {
	xxx_messageInfo_ProxyId.DiscardUnknown(m)
}

var xxx_messageInfo_ProxyId proto.InternalMessageInfo

func (m *ProxyId) GetApplication() string {
	if m != nil {
		return m.Application
	}
	return ""
}

func (m *ProxyId) GetPrimitive() string {
	if m != nil {
		return m.Primitive
	}
	return ""
}

func (m *ProxyId) GetClient() string {
	if m != nil {
		return m.Client
	}
	return ""
}

type Proxy struct {
	ProxyMeta `protobuf:"bytes,1,opt,name=meta,proto3,embedded=meta" json:"meta"`
	Spec      ProxySpec   `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec"`
	Status    ProxyStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status"`
}

func (m *Proxy) Reset()         { *m = Proxy{} }
func (m *Proxy) String() string { return proto.CompactTextString(m) }
func (*Proxy) ProtoMessage()    {}
func (*Proxy) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e3b2cb01e4d98b4, []int{1}
}
func (m *Proxy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proxy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proxy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proxy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proxy.Merge(m, src)
}
func (m *Proxy) XXX_Size() int {
	return m.Size()
}
func (m *Proxy) XXX_DiscardUnknown() {
	xxx_messageInfo_Proxy.DiscardUnknown(m)
}

var xxx_messageInfo_Proxy proto.InternalMessageInfo

func (m *Proxy) GetSpec() ProxySpec {
	if m != nil {
		return m.Spec
	}
	return ProxySpec{}
}

func (m *Proxy) GetStatus() ProxyStatus {
	if m != nil {
		return m.Status
	}
	return ProxyStatus{}
}

type ProxyMeta struct {
	ID      ProxyId           `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Version ObjectVersion     `protobuf:"varint,2,opt,name=version,proto3,casttype=ObjectVersion" json:"version,omitempty"`
	Labels  map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ProxyMeta) Reset()         { *m = ProxyMeta{} }
func (m *ProxyMeta) String() string { return proto.CompactTextString(m) }
func (*ProxyMeta) ProtoMessage()    {}
func (*ProxyMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e3b2cb01e4d98b4, []int{2}
}
func (m *ProxyMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProxyMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProxyMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProxyMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProxyMeta.Merge(m, src)
}
func (m *ProxyMeta) XXX_Size() int {
	return m.Size()
}
func (m *ProxyMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_ProxyMeta.DiscardUnknown(m)
}

var xxx_messageInfo_ProxyMeta proto.InternalMessageInfo

func (m *ProxyMeta) GetID() ProxyId {
	if m != nil {
		return m.ID
	}
	return ProxyId{}
}

func (m *ProxyMeta) GetVersion() ObjectVersion {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ProxyMeta) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type ProxySpec struct {
	Kind   string     `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Config *types.Any `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *ProxySpec) Reset()         { *m = ProxySpec{} }
func (m *ProxySpec) String() string { return proto.CompactTextString(m) }
func (*ProxySpec) ProtoMessage()    {}
func (*ProxySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e3b2cb01e4d98b4, []int{3}
}
func (m *ProxySpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProxySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProxySpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProxySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProxySpec.Merge(m, src)
}
func (m *ProxySpec) XXX_Size() int {
	return m.Size()
}
func (m *ProxySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ProxySpec.DiscardUnknown(m)
}

var xxx_messageInfo_ProxySpec proto.InternalMessageInfo

func (m *ProxySpec) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *ProxySpec) GetConfig() *types.Any {
	if m != nil {
		return m.Config
	}
	return nil
}

type ProxyStatus struct {
	State ProxyStatus_State `protobuf:"varint,1,opt,name=state,proto3,enum=atomix.runtime.v1.ProxyStatus_State" json:"state,omitempty"`
}

func (m *ProxyStatus) Reset()         { *m = ProxyStatus{} }
func (m *ProxyStatus) String() string { return proto.CompactTextString(m) }
func (*ProxyStatus) ProtoMessage()    {}
func (*ProxyStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e3b2cb01e4d98b4, []int{4}
}
func (m *ProxyStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProxyStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProxyStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProxyStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProxyStatus.Merge(m, src)
}
func (m *ProxyStatus) XXX_Size() int {
	return m.Size()
}
func (m *ProxyStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ProxyStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ProxyStatus proto.InternalMessageInfo

func (m *ProxyStatus) GetState() ProxyStatus_State {
	if m != nil {
		return m.State
	}
	return ProxyStatus_NONE
}

type GetProxyRequest struct {
	ProxyID ProxyId `protobuf:"bytes,1,opt,name=proxy_id,json=proxyId,proto3" json:"proxy_id"`
}

func (m *GetProxyRequest) Reset()         { *m = GetProxyRequest{} }
func (m *GetProxyRequest) String() string { return proto.CompactTextString(m) }
func (*GetProxyRequest) ProtoMessage()    {}
func (*GetProxyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e3b2cb01e4d98b4, []int{5}
}
func (m *GetProxyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetProxyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetProxyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetProxyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProxyRequest.Merge(m, src)
}
func (m *GetProxyRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetProxyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProxyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetProxyRequest proto.InternalMessageInfo

func (m *GetProxyRequest) GetProxyID() ProxyId {
	if m != nil {
		return m.ProxyID
	}
	return ProxyId{}
}

type GetProxyResponse struct {
	Proxy *Proxy `protobuf:"bytes,1,opt,name=proxy,proto3" json:"proxy,omitempty"`
}

func (m *GetProxyResponse) Reset()         { *m = GetProxyResponse{} }
func (m *GetProxyResponse) String() string { return proto.CompactTextString(m) }
func (*GetProxyResponse) ProtoMessage()    {}
func (*GetProxyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e3b2cb01e4d98b4, []int{6}
}
func (m *GetProxyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetProxyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetProxyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetProxyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProxyResponse.Merge(m, src)
}
func (m *GetProxyResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetProxyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProxyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetProxyResponse proto.InternalMessageInfo

func (m *GetProxyResponse) GetProxy() *Proxy {
	if m != nil {
		return m.Proxy
	}
	return nil
}

type ListProxysRequest struct {
	Type  string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Watch bool   `protobuf:"varint,2,opt,name=watch,proto3" json:"watch,omitempty"`
}

func (m *ListProxysRequest) Reset()         { *m = ListProxysRequest{} }
func (m *ListProxysRequest) String() string { return proto.CompactTextString(m) }
func (*ListProxysRequest) ProtoMessage()    {}
func (*ListProxysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e3b2cb01e4d98b4, []int{7}
}
func (m *ListProxysRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListProxysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListProxysRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListProxysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListProxysRequest.Merge(m, src)
}
func (m *ListProxysRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListProxysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListProxysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListProxysRequest proto.InternalMessageInfo

func (m *ListProxysRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ListProxysRequest) GetWatch() bool {
	if m != nil {
		return m.Watch
	}
	return false
}

type ListProxysResponse struct {
	Proxys []*Proxy `protobuf:"bytes,1,rep,name=proxys,proto3" json:"proxys,omitempty"`
}

func (m *ListProxysResponse) Reset()         { *m = ListProxysResponse{} }
func (m *ListProxysResponse) String() string { return proto.CompactTextString(m) }
func (*ListProxysResponse) ProtoMessage()    {}
func (*ListProxysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e3b2cb01e4d98b4, []int{8}
}
func (m *ListProxysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListProxysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListProxysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListProxysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListProxysResponse.Merge(m, src)
}
func (m *ListProxysResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListProxysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListProxysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListProxysResponse proto.InternalMessageInfo

func (m *ListProxysResponse) GetProxys() []*Proxy {
	if m != nil {
		return m.Proxys
	}
	return nil
}

func init() {
	proto.RegisterEnum("atomix.runtime.v1.ProxyStatus_State", ProxyStatus_State_name, ProxyStatus_State_value)
	proto.RegisterType((*ProxyId)(nil), "atomix.runtime.v1.ProxyId")
	proto.RegisterType((*Proxy)(nil), "atomix.runtime.v1.Proxy")
	proto.RegisterType((*ProxyMeta)(nil), "atomix.runtime.v1.ProxyMeta")
	proto.RegisterMapType((map[string]string)(nil), "atomix.runtime.v1.ProxyMeta.LabelsEntry")
	proto.RegisterType((*ProxySpec)(nil), "atomix.runtime.v1.ProxySpec")
	proto.RegisterType((*ProxyStatus)(nil), "atomix.runtime.v1.ProxyStatus")
	proto.RegisterType((*GetProxyRequest)(nil), "atomix.runtime.v1.GetProxyRequest")
	proto.RegisterType((*GetProxyResponse)(nil), "atomix.runtime.v1.GetProxyResponse")
	proto.RegisterType((*ListProxysRequest)(nil), "atomix.runtime.v1.ListProxysRequest")
	proto.RegisterType((*ListProxysResponse)(nil), "atomix.runtime.v1.ListProxysResponse")
}

func init() { proto.RegisterFile("atomix/runtime/v1/proxy.proto", fileDescriptor_2e3b2cb01e4d98b4) }

var fileDescriptor_2e3b2cb01e4d98b4 = []byte{
	// 690 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0xcd, 0x24, 0xce, 0xa3, 0xd7, 0x40, 0xd3, 0x51, 0x85, 0x82, 0x55, 0x9c, 0xca, 0x80, 0x54,
	0x09, 0xe4, 0xd0, 0x20, 0x55, 0x10, 0x81, 0x04, 0x69, 0xd2, 0x2a, 0x52, 0x9b, 0x54, 0xae, 0x84,
	0xd4, 0x15, 0x72, 0x9c, 0x69, 0x18, 0x9a, 0xd8, 0xc6, 0x9e, 0x84, 0xe6, 0x27, 0x10, 0x9f, 0xc0,
	0x6f, 0xb0, 0x61, 0xdd, 0x65, 0x97, 0xac, 0x22, 0x94, 0x6e, 0xd8, 0xf0, 0x03, 0xac, 0xd0, 0x3c,
	0x42, 0x23, 0xda, 0x04, 0x56, 0x9e, 0x3b, 0xf7, 0x9c, 0x33, 0x67, 0xee, 0x19, 0xc3, 0x5d, 0x97,
	0x05, 0x7d, 0x7a, 0x5a, 0x8a, 0x06, 0x3e, 0xa3, 0x7d, 0x52, 0x1a, 0x6e, 0x96, 0xc2, 0x28, 0x38,
	0x1d, 0xd9, 0x61, 0x14, 0xb0, 0x00, 0xaf, 0xc8, 0xb6, 0xad, 0xda, 0xf6, 0x70, 0xd3, 0x28, 0x5e,
	0x65, 0xc4, 0x24, 0x8e, 0x69, 0xe0, 0x4b, 0x8e, 0x71, 0xa7, 0x1b, 0x04, 0xdd, 0x1e, 0x29, 0x89,
	0xaa, 0x3d, 0x38, 0x2e, 0xb9, 0xbe, 0x92, 0x33, 0x56, 0xbb, 0x41, 0x37, 0x10, 0xcb, 0x12, 0x5f,
	0xc9, 0x5d, 0xab, 0x0b, 0xd9, 0x03, 0x7e, 0x66, 0xa3, 0x83, 0xd7, 0x41, 0x77, 0xc3, 0xb0, 0x47,
	0x3d, 0x97, 0xd1, 0xc0, 0x2f, 0xa0, 0x75, 0xb4, 0xb1, 0xe4, 0xcc, 0x6e, 0xe1, 0x35, 0x58, 0x0a,
	0x23, 0xda, 0xa7, 0x8c, 0x0e, 0x49, 0x21, 0x29, 0xfa, 0x97, 0x1b, 0xf8, 0x36, 0x64, 0xbc, 0x1e,
	0x25, 0x3e, 0x2b, 0xa4, 0x44, 0x4b, 0x55, 0x15, 0xed, 0xc7, 0xe7, 0x22, 0xb2, 0xbe, 0x20, 0x48,
	0x8b, 0x93, 0x70, 0x05, 0xb4, 0x3e, 0x61, 0xae, 0x38, 0x40, 0x2f, 0xaf, 0xd9, 0x57, 0xae, 0x69,
	0x0b, 0xdc, 0x3e, 0x61, 0x6e, 0x35, 0x77, 0x36, 0x2e, 0x26, 0xce, 0xc7, 0x45, 0xe4, 0x08, 0x0e,
	0xde, 0x02, 0x2d, 0x0e, 0x89, 0x27, 0x0e, 0x5f, 0xc0, 0x3d, 0x0c, 0x89, 0x57, 0xd5, 0x38, 0xd7,
	0x11, 0x78, 0xfc, 0x1c, 0x32, 0x31, 0x73, 0xd9, 0x20, 0x16, 0xde, 0xf4, 0xb2, 0x39, 0x97, 0x29,
	0x50, 0x8a, 0xab, 0x38, 0xd6, 0x4f, 0x04, 0x4b, 0x7f, 0x3c, 0xe1, 0x2d, 0x48, 0xd2, 0x8e, 0x72,
	0x6f, 0xcc, 0xd3, 0x69, 0x74, 0xaa, 0xc0, 0x35, 0x26, 0xe3, 0x62, 0xb2, 0x51, 0x73, 0x92, 0xb4,
	0x83, 0x1f, 0x42, 0x76, 0x48, 0x22, 0x1e, 0x96, 0xb0, 0xaf, 0x55, 0x57, 0x7e, 0x8d, 0x8b, 0x37,
	0x5b, 0xed, 0x77, 0xc4, 0x63, 0xaf, 0x65, 0xc3, 0x99, 0x22, 0xf0, 0x4b, 0xc8, 0xf4, 0xdc, 0x36,
	0xe9, 0x71, 0xc3, 0xa9, 0x0d, 0xbd, 0xbc, 0xb1, 0x68, 0x4c, 0xf6, 0x9e, 0x80, 0xd6, 0x7d, 0x16,
	0x8d, 0x1c, 0xc5, 0x33, 0x9e, 0x81, 0x3e, 0xb3, 0x8d, 0xf3, 0x90, 0x3a, 0x21, 0x23, 0x95, 0x2a,
	0x5f, 0xe2, 0x55, 0x48, 0x0f, 0xdd, 0xde, 0x60, 0x9a, 0xa4, 0x2c, 0x2a, 0xc9, 0xa7, 0xc8, 0xda,
	0x57, 0xd7, 0xe5, 0x63, 0xc4, 0x18, 0xb4, 0x13, 0xea, 0x77, 0x14, 0x53, 0xac, 0xf1, 0x23, 0xc8,
	0x78, 0x81, 0x7f, 0x4c, 0xbb, 0x2a, 0x88, 0x55, 0x5b, 0xbe, 0x3b, 0x7b, 0xfa, 0xee, 0xec, 0x57,
	0xfe, 0xc8, 0x51, 0x18, 0xeb, 0x23, 0x02, 0x7d, 0x66, 0xb8, 0xb8, 0x02, 0x69, 0x3e, 0x58, 0x22,
	0x24, 0x6f, 0x95, 0xef, 0x2f, 0xce, 0xc2, 0xe6, 0x1f, 0xe2, 0x48, 0x8a, 0xb5, 0x0d, 0x69, 0x51,
	0xe3, 0x1c, 0x68, 0xcd, 0x56, 0xb3, 0x9e, 0x4f, 0x60, 0x1d, 0xb2, 0xad, 0x83, 0x7a, 0xb3, 0xd1,
	0xdc, 0xcd, 0x23, 0x0c, 0x90, 0xe1, 0x45, 0xbd, 0x96, 0x4f, 0xf2, 0xc6, 0xf6, 0x5e, 0xeb, 0x90,
	0x37, 0x52, 0xbc, 0xc1, 0x8b, 0x7a, 0x2d, 0xaf, 0x59, 0x47, 0xb0, 0xbc, 0x4b, 0x98, 0x38, 0xc3,
	0x21, 0xef, 0x07, 0x24, 0x66, 0x78, 0x07, 0x72, 0xe2, 0xdf, 0x7b, 0xf3, 0x5f, 0xd1, 0x2e, 0xab,
	0x68, 0xd5, 0xbf, 0x53, 0x73, 0xb2, 0xa1, 0xec, 0x58, 0x55, 0xc8, 0x5f, 0x4a, 0xc7, 0x61, 0xe0,
	0xc7, 0x04, 0xdb, 0x90, 0x16, 0x6d, 0x25, 0x5c, 0x98, 0x27, 0xec, 0x48, 0x98, 0xf5, 0x02, 0x56,
	0xf6, 0x68, 0x2c, 0x45, 0xe2, 0xa9, 0x41, 0x0c, 0x1a, 0x1b, 0x85, 0x64, 0x1a, 0x03, 0x5f, 0xf3,
	0x04, 0x3f, 0xb8, 0xcc, 0x7b, 0x2b, 0x52, 0xc8, 0x39, 0xb2, 0xb0, 0x76, 0x00, 0xcf, 0xd2, 0x95,
	0x89, 0xc7, 0x90, 0x11, 0xea, 0x71, 0x01, 0x89, 0x07, 0x35, 0xdf, 0x85, 0xc2, 0x95, 0xbf, 0x22,
	0xb8, 0x21, 0x73, 0x20, 0xd1, 0x90, 0x7a, 0x04, 0x1f, 0x42, 0x6e, 0x7a, 0x37, 0x6c, 0x5d, 0x43,
	0xff, 0x6b, 0xa6, 0xc6, 0xbd, 0x85, 0x18, 0xe5, 0xeb, 0x08, 0xe0, 0xd2, 0x2d, 0xbe, 0xee, 0x2d,
	0x5c, 0x99, 0x85, 0xf1, 0xe0, 0x1f, 0x28, 0x29, 0x5d, 0x2d, 0x9c, 0x4d, 0x4c, 0x74, 0x3e, 0x31,
	0xd1, 0xf7, 0x89, 0x89, 0x3e, 0x5d, 0x98, 0x89, 0xf3, 0x0b, 0x33, 0xf1, 0xed, 0xc2, 0x4c, 0xb4,
	0x33, 0xe2, 0x9d, 0x3e, 0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x5d, 0xda, 0xcb, 0xef, 0x82, 0x05,
	0x00, 0x00,
}

func (this *ProxyId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyId)
	if !ok {
		that2, ok := that.(ProxyId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Application != that1.Application {
		return false
	}
	if this.Primitive != that1.Primitive {
		return false
	}
	if this.Client != that1.Client {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProxyServiceClient is the client API for ProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProxyServiceClient interface {
	GetProxy(ctx context.Context, in *GetProxyRequest, opts ...grpc.CallOption) (*GetProxyResponse, error)
	ListProxys(ctx context.Context, in *ListProxysRequest, opts ...grpc.CallOption) (*ListProxysResponse, error)
}

type proxyServiceClient struct {
	cc *grpc.ClientConn
}

func NewProxyServiceClient(cc *grpc.ClientConn) ProxyServiceClient {
	return &proxyServiceClient{cc}
}

func (c *proxyServiceClient) GetProxy(ctx context.Context, in *GetProxyRequest, opts ...grpc.CallOption) (*GetProxyResponse, error) {
	out := new(GetProxyResponse)
	err := c.cc.Invoke(ctx, "/atomix.runtime.v1.ProxyService/GetProxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyServiceClient) ListProxys(ctx context.Context, in *ListProxysRequest, opts ...grpc.CallOption) (*ListProxysResponse, error) {
	out := new(ListProxysResponse)
	err := c.cc.Invoke(ctx, "/atomix.runtime.v1.ProxyService/ListProxys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyServiceServer is the server API for ProxyService service.
type ProxyServiceServer interface {
	GetProxy(context.Context, *GetProxyRequest) (*GetProxyResponse, error)
	ListProxys(context.Context, *ListProxysRequest) (*ListProxysResponse, error)
}

// UnimplementedProxyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProxyServiceServer struct {
}

func (*UnimplementedProxyServiceServer) GetProxy(ctx context.Context, req *GetProxyRequest) (*GetProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProxy not implemented")
}
func (*UnimplementedProxyServiceServer) ListProxys(ctx context.Context, req *ListProxysRequest) (*ListProxysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProxys not implemented")
}

func RegisterProxyServiceServer(s *grpc.Server, srv ProxyServiceServer) {
	s.RegisterService(&_ProxyService_serviceDesc, srv)
}

func _ProxyService_GetProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServiceServer).GetProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.runtime.v1.ProxyService/GetProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServiceServer).GetProxy(ctx, req.(*GetProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyService_ListProxys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProxysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServiceServer).ListProxys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.runtime.v1.ProxyService/ListProxys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServiceServer).ListProxys(ctx, req.(*ListProxysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProxyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "atomix.runtime.v1.ProxyService",
	HandlerType: (*ProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProxy",
			Handler:    _ProxyService_GetProxy_Handler,
		},
		{
			MethodName: "ListProxys",
			Handler:    _ProxyService_ListProxys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "atomix/runtime/v1/proxy.proto",
}

func (m *ProxyId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Client) > 0 {
		i -= len(m.Client)
		copy(dAtA[i:], m.Client)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.Client)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Primitive) > 0 {
		i -= len(m.Primitive)
		copy(dAtA[i:], m.Primitive)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.Primitive)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Application) > 0 {
		i -= len(m.Application)
		copy(dAtA[i:], m.Application)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.Application)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Proxy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProxy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProxy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ProxyMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProxy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ProxyMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintProxy(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintProxy(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintProxy(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Version != 0 {
		i = encodeVarintProxy(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProxy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ProxySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxySpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxySpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProxy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Kind) > 0 {
		i -= len(m.Kind)
		copy(dAtA[i:], m.Kind)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.Kind)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProxyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintProxy(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetProxyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetProxyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetProxyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ProxyID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProxy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetProxyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetProxyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetProxyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proxy != nil {
		{
			size, err := m.Proxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProxy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListProxysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListProxysRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListProxysRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Watch {
		i--
		if m.Watch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListProxysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListProxysResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListProxysResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proxys) > 0 {
		for iNdEx := len(m.Proxys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Proxys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProxy(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintProxy(dAtA []byte, offset int, v uint64) int {
	offset -= sovProxy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProxyId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Application)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	l = len(m.Primitive)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	l = len(m.Client)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	return n
}

func (m *Proxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ProxyMeta.Size()
	n += 1 + l + sovProxy(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovProxy(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovProxy(uint64(l))
	return n
}

func (m *ProxyMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovProxy(uint64(l))
	if m.Version != 0 {
		n += 1 + sovProxy(uint64(m.Version))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovProxy(uint64(len(k))) + 1 + len(v) + sovProxy(uint64(len(v)))
			n += mapEntrySize + 1 + sovProxy(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ProxySpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	return n
}

func (m *ProxyStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovProxy(uint64(m.State))
	}
	return n
}

func (m *GetProxyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ProxyID.Size()
	n += 1 + l + sovProxy(uint64(l))
	return n
}

func (m *GetProxyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proxy != nil {
		l = m.Proxy.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	return n
}

func (m *ListProxysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.Watch {
		n += 2
	}
	return n
}

func (m *ListProxysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Proxys) > 0 {
		for _, e := range m.Proxys {
			l = e.Size()
			n += 1 + l + sovProxy(uint64(l))
		}
	}
	return n
}

func sovProxy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProxy(x uint64) (n int) {
	return sovProxy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProxyId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Application = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Primitive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Primitive = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Client = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proxy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proxy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proxy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProxyMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= ObjectVersion(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProxy
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProxy
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthProxy
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthProxy
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProxy
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthProxy
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthProxy
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProxy(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthProxy
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &types.Any{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= ProxyStatus_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetProxyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetProxyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetProxyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProxyID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetProxyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetProxyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetProxyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proxy == nil {
				m.Proxy = &Proxy{}
			}
			if err := m.Proxy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListProxysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListProxysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListProxysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Watch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Watch = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListProxysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListProxysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListProxysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proxys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proxys = append(m.Proxys, &Proxy{})
			if err := m.Proxys[len(m.Proxys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProxy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProxy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProxy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProxy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProxy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProxy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProxy = fmt.Errorf("proto: unexpected end of group")
)
