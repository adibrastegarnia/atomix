// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/runtime/v1/binding.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BindingId struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *BindingId) Reset()         { *m = BindingId{} }
func (m *BindingId) String() string { return proto.CompactTextString(m) }
func (*BindingId) ProtoMessage()    {}
func (*BindingId) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c6c6f31e381d250, []int{0}
}
func (m *BindingId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BindingId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BindingId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BindingId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BindingId.Merge(m, src)
}
func (m *BindingId) XXX_Size() int {
	return m.Size()
}
func (m *BindingId) XXX_DiscardUnknown() {
	xxx_messageInfo_BindingId.DiscardUnknown(m)
}

var xxx_messageInfo_BindingId proto.InternalMessageInfo

func (m *BindingId) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *BindingId) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type BindingMeta struct {
	ID      BindingId     `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Version ObjectVersion `protobuf:"varint,2,opt,name=version,proto3,casttype=ObjectVersion" json:"version,omitempty"`
}

func (m *BindingMeta) Reset()         { *m = BindingMeta{} }
func (m *BindingMeta) String() string { return proto.CompactTextString(m) }
func (*BindingMeta) ProtoMessage()    {}
func (*BindingMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c6c6f31e381d250, []int{1}
}
func (m *BindingMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BindingMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BindingMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BindingMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BindingMeta.Merge(m, src)
}
func (m *BindingMeta) XXX_Size() int {
	return m.Size()
}
func (m *BindingMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_BindingMeta.DiscardUnknown(m)
}

var xxx_messageInfo_BindingMeta proto.InternalMessageInfo

func (m *BindingMeta) GetID() BindingId {
	if m != nil {
		return m.ID
	}
	return BindingId{}
}

func (m *BindingMeta) GetVersion() ObjectVersion {
	if m != nil {
		return m.Version
	}
	return 0
}

type Binding struct {
	BindingMeta `protobuf:"bytes,1,opt,name=meta,proto3,embedded=meta" json:"meta"`
	Spec        BindingSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec"`
}

func (m *Binding) Reset()         { *m = Binding{} }
func (m *Binding) String() string { return proto.CompactTextString(m) }
func (*Binding) ProtoMessage()    {}
func (*Binding) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c6c6f31e381d250, []int{2}
}
func (m *Binding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Binding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Binding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Binding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Binding.Merge(m, src)
}
func (m *Binding) XXX_Size() int {
	return m.Size()
}
func (m *Binding) XXX_DiscardUnknown() {
	xxx_messageInfo_Binding.DiscardUnknown(m)
}

var xxx_messageInfo_Binding proto.InternalMessageInfo

func (m *Binding) GetSpec() BindingSpec {
	if m != nil {
		return m.Spec
	}
	return BindingSpec{}
}

type BindingSpec struct {
	ClusterID ClusterId     `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id"`
	Rules     []BindingRule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules"`
}

func (m *BindingSpec) Reset()         { *m = BindingSpec{} }
func (m *BindingSpec) String() string { return proto.CompactTextString(m) }
func (*BindingSpec) ProtoMessage()    {}
func (*BindingSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c6c6f31e381d250, []int{3}
}
func (m *BindingSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BindingSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BindingSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BindingSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BindingSpec.Merge(m, src)
}
func (m *BindingSpec) XXX_Size() int {
	return m.Size()
}
func (m *BindingSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_BindingSpec.DiscardUnknown(m)
}

var xxx_messageInfo_BindingSpec proto.InternalMessageInfo

func (m *BindingSpec) GetClusterID() ClusterId {
	if m != nil {
		return m.ClusterID
	}
	return ClusterId{}
}

func (m *BindingSpec) GetRules() []BindingRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type BindingRule struct {
	Kinds    []string          `protobuf:"bytes,1,rep,name=kinds,proto3" json:"kinds,omitempty"`
	Names    []string          `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *BindingRule) Reset()         { *m = BindingRule{} }
func (m *BindingRule) String() string { return proto.CompactTextString(m) }
func (*BindingRule) ProtoMessage()    {}
func (*BindingRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c6c6f31e381d250, []int{4}
}
func (m *BindingRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BindingRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BindingRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BindingRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BindingRule.Merge(m, src)
}
func (m *BindingRule) XXX_Size() int {
	return m.Size()
}
func (m *BindingRule) XXX_DiscardUnknown() {
	xxx_messageInfo_BindingRule.DiscardUnknown(m)
}

var xxx_messageInfo_BindingRule proto.InternalMessageInfo

func (m *BindingRule) GetKinds() []string {
	if m != nil {
		return m.Kinds
	}
	return nil
}

func (m *BindingRule) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *BindingRule) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type GetBindingRequest struct {
	BindingID BindingId `protobuf:"bytes,1,opt,name=binding_id,json=bindingId,proto3" json:"binding_id"`
}

func (m *GetBindingRequest) Reset()         { *m = GetBindingRequest{} }
func (m *GetBindingRequest) String() string { return proto.CompactTextString(m) }
func (*GetBindingRequest) ProtoMessage()    {}
func (*GetBindingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c6c6f31e381d250, []int{5}
}
func (m *GetBindingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBindingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBindingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBindingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBindingRequest.Merge(m, src)
}
func (m *GetBindingRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBindingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBindingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBindingRequest proto.InternalMessageInfo

func (m *GetBindingRequest) GetBindingID() BindingId {
	if m != nil {
		return m.BindingID
	}
	return BindingId{}
}

type GetBindingResponse struct {
	Binding *Binding `protobuf:"bytes,1,opt,name=binding,proto3" json:"binding,omitempty"`
}

func (m *GetBindingResponse) Reset()         { *m = GetBindingResponse{} }
func (m *GetBindingResponse) String() string { return proto.CompactTextString(m) }
func (*GetBindingResponse) ProtoMessage()    {}
func (*GetBindingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c6c6f31e381d250, []int{6}
}
func (m *GetBindingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBindingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBindingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBindingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBindingResponse.Merge(m, src)
}
func (m *GetBindingResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBindingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBindingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBindingResponse proto.InternalMessageInfo

func (m *GetBindingResponse) GetBinding() *Binding {
	if m != nil {
		return m.Binding
	}
	return nil
}

type ListBindingsRequest struct {
	Watch bool `protobuf:"varint,1,opt,name=watch,proto3" json:"watch,omitempty"`
}

func (m *ListBindingsRequest) Reset()         { *m = ListBindingsRequest{} }
func (m *ListBindingsRequest) String() string { return proto.CompactTextString(m) }
func (*ListBindingsRequest) ProtoMessage()    {}
func (*ListBindingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c6c6f31e381d250, []int{7}
}
func (m *ListBindingsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBindingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBindingsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBindingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBindingsRequest.Merge(m, src)
}
func (m *ListBindingsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListBindingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBindingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListBindingsRequest proto.InternalMessageInfo

func (m *ListBindingsRequest) GetWatch() bool {
	if m != nil {
		return m.Watch
	}
	return false
}

type ListBindingsResponse struct {
	Bindings []*Binding `protobuf:"bytes,1,rep,name=bindings,proto3" json:"bindings,omitempty"`
}

func (m *ListBindingsResponse) Reset()         { *m = ListBindingsResponse{} }
func (m *ListBindingsResponse) String() string { return proto.CompactTextString(m) }
func (*ListBindingsResponse) ProtoMessage()    {}
func (*ListBindingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c6c6f31e381d250, []int{8}
}
func (m *ListBindingsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBindingsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBindingsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBindingsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBindingsResponse.Merge(m, src)
}
func (m *ListBindingsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListBindingsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBindingsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListBindingsResponse proto.InternalMessageInfo

func (m *ListBindingsResponse) GetBindings() []*Binding {
	if m != nil {
		return m.Bindings
	}
	return nil
}

type CreateBindingRequest struct {
	Binding *Binding `protobuf:"bytes,1,opt,name=binding,proto3" json:"binding,omitempty"`
}

func (m *CreateBindingRequest) Reset()         { *m = CreateBindingRequest{} }
func (m *CreateBindingRequest) String() string { return proto.CompactTextString(m) }
func (*CreateBindingRequest) ProtoMessage()    {}
func (*CreateBindingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c6c6f31e381d250, []int{9}
}
func (m *CreateBindingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateBindingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateBindingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateBindingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBindingRequest.Merge(m, src)
}
func (m *CreateBindingRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateBindingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBindingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBindingRequest proto.InternalMessageInfo

func (m *CreateBindingRequest) GetBinding() *Binding {
	if m != nil {
		return m.Binding
	}
	return nil
}

type CreateBindingResponse struct {
	Binding *Binding `protobuf:"bytes,1,opt,name=binding,proto3" json:"binding,omitempty"`
}

func (m *CreateBindingResponse) Reset()         { *m = CreateBindingResponse{} }
func (m *CreateBindingResponse) String() string { return proto.CompactTextString(m) }
func (*CreateBindingResponse) ProtoMessage()    {}
func (*CreateBindingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c6c6f31e381d250, []int{10}
}
func (m *CreateBindingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateBindingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateBindingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateBindingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBindingResponse.Merge(m, src)
}
func (m *CreateBindingResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateBindingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBindingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBindingResponse proto.InternalMessageInfo

func (m *CreateBindingResponse) GetBinding() *Binding {
	if m != nil {
		return m.Binding
	}
	return nil
}

type UpdateBindingRequest struct {
	Binding *Binding `protobuf:"bytes,1,opt,name=binding,proto3" json:"binding,omitempty"`
}

func (m *UpdateBindingRequest) Reset()         { *m = UpdateBindingRequest{} }
func (m *UpdateBindingRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateBindingRequest) ProtoMessage()    {}
func (*UpdateBindingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c6c6f31e381d250, []int{11}
}
func (m *UpdateBindingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBindingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBindingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBindingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBindingRequest.Merge(m, src)
}
func (m *UpdateBindingRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBindingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBindingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBindingRequest proto.InternalMessageInfo

func (m *UpdateBindingRequest) GetBinding() *Binding {
	if m != nil {
		return m.Binding
	}
	return nil
}

type UpdateBindingResponse struct {
	Binding *Binding `protobuf:"bytes,1,opt,name=binding,proto3" json:"binding,omitempty"`
}

func (m *UpdateBindingResponse) Reset()         { *m = UpdateBindingResponse{} }
func (m *UpdateBindingResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateBindingResponse) ProtoMessage()    {}
func (*UpdateBindingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c6c6f31e381d250, []int{12}
}
func (m *UpdateBindingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBindingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBindingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBindingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBindingResponse.Merge(m, src)
}
func (m *UpdateBindingResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBindingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBindingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBindingResponse proto.InternalMessageInfo

func (m *UpdateBindingResponse) GetBinding() *Binding {
	if m != nil {
		return m.Binding
	}
	return nil
}

type DeleteBindingRequest struct {
	Binding *Binding `protobuf:"bytes,1,opt,name=binding,proto3" json:"binding,omitempty"`
}

func (m *DeleteBindingRequest) Reset()         { *m = DeleteBindingRequest{} }
func (m *DeleteBindingRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteBindingRequest) ProtoMessage()    {}
func (*DeleteBindingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c6c6f31e381d250, []int{13}
}
func (m *DeleteBindingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteBindingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteBindingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteBindingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBindingRequest.Merge(m, src)
}
func (m *DeleteBindingRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteBindingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBindingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBindingRequest proto.InternalMessageInfo

func (m *DeleteBindingRequest) GetBinding() *Binding {
	if m != nil {
		return m.Binding
	}
	return nil
}

type DeleteBindingResponse struct {
}

func (m *DeleteBindingResponse) Reset()         { *m = DeleteBindingResponse{} }
func (m *DeleteBindingResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteBindingResponse) ProtoMessage()    {}
func (*DeleteBindingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c6c6f31e381d250, []int{14}
}
func (m *DeleteBindingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteBindingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteBindingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteBindingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBindingResponse.Merge(m, src)
}
func (m *DeleteBindingResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteBindingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBindingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBindingResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*BindingId)(nil), "atomix.runtime.v1.BindingId")
	proto.RegisterType((*BindingMeta)(nil), "atomix.runtime.v1.BindingMeta")
	proto.RegisterType((*Binding)(nil), "atomix.runtime.v1.Binding")
	proto.RegisterType((*BindingSpec)(nil), "atomix.runtime.v1.BindingSpec")
	proto.RegisterType((*BindingRule)(nil), "atomix.runtime.v1.BindingRule")
	proto.RegisterMapType((map[string]string)(nil), "atomix.runtime.v1.BindingRule.MetadataEntry")
	proto.RegisterType((*GetBindingRequest)(nil), "atomix.runtime.v1.GetBindingRequest")
	proto.RegisterType((*GetBindingResponse)(nil), "atomix.runtime.v1.GetBindingResponse")
	proto.RegisterType((*ListBindingsRequest)(nil), "atomix.runtime.v1.ListBindingsRequest")
	proto.RegisterType((*ListBindingsResponse)(nil), "atomix.runtime.v1.ListBindingsResponse")
	proto.RegisterType((*CreateBindingRequest)(nil), "atomix.runtime.v1.CreateBindingRequest")
	proto.RegisterType((*CreateBindingResponse)(nil), "atomix.runtime.v1.CreateBindingResponse")
	proto.RegisterType((*UpdateBindingRequest)(nil), "atomix.runtime.v1.UpdateBindingRequest")
	proto.RegisterType((*UpdateBindingResponse)(nil), "atomix.runtime.v1.UpdateBindingResponse")
	proto.RegisterType((*DeleteBindingRequest)(nil), "atomix.runtime.v1.DeleteBindingRequest")
	proto.RegisterType((*DeleteBindingResponse)(nil), "atomix.runtime.v1.DeleteBindingResponse")
}

func init() { proto.RegisterFile("atomix/runtime/v1/binding.proto", fileDescriptor_6c6c6f31e381d250) }

var fileDescriptor_6c6c6f31e381d250 = []byte{
	// 681 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x4d, 0x6f, 0xd3, 0x40,
	0x14, 0x8c, 0x93, 0x94, 0xc6, 0xaf, 0x04, 0x91, 0x25, 0x15, 0x91, 0x55, 0x39, 0x95, 0xc5, 0x47,
	0xa5, 0xa2, 0x44, 0x2d, 0x08, 0x55, 0x85, 0x93, 0x1b, 0x04, 0x45, 0x6d, 0x91, 0x16, 0x81, 0xc4,
	0xa9, 0x72, 0xec, 0x55, 0x31, 0x4d, 0xec, 0x60, 0xaf, 0x03, 0x3d, 0xf2, 0x0f, 0xb8, 0x72, 0xe3,
	0xa7, 0x70, 0xec, 0xb1, 0x47, 0x4e, 0x11, 0x4a, 0x2f, 0xfc, 0x04, 0xc4, 0x09, 0xed, 0x87, 0x93,
	0x26, 0x5d, 0x1c, 0x44, 0x7b, 0xdb, 0xdd, 0x37, 0xf3, 0x66, 0xfc, 0x76, 0x36, 0x81, 0xba, 0x43,
	0xc3, 0xae, 0xff, 0xb1, 0x19, 0x25, 0x01, 0xf5, 0xbb, 0xa4, 0xd9, 0x5f, 0x6b, 0xb6, 0xfd, 0xc0,
	0xf3, 0x83, 0x83, 0x46, 0x2f, 0x0a, 0x69, 0x88, 0x2a, 0x02, 0xd0, 0x90, 0x80, 0x46, 0x7f, 0xcd,
	0x50, 0x70, 0xdc, 0x4e, 0x12, 0x53, 0x12, 0x09, 0x8e, 0x51, 0x3d, 0x08, 0x0f, 0x42, 0xbe, 0x6c,
	0xb2, 0x95, 0x38, 0xb5, 0xb6, 0x40, 0xb7, 0x45, 0xeb, 0x6d, 0x0f, 0x2d, 0x81, 0x1e, 0x38, 0x5d,
	0x12, 0xf7, 0x1c, 0x97, 0xd4, 0xb4, 0x65, 0x6d, 0x45, 0xc7, 0xe3, 0x03, 0x84, 0xa0, 0xc8, 0x36,
	0xb5, 0x3c, 0x2f, 0xf0, 0xf5, 0x66, 0xf1, 0xe7, 0xd7, 0xba, 0x66, 0x51, 0x58, 0x90, 0x4d, 0x76,
	0x09, 0x75, 0xd0, 0x06, 0xe4, 0x7d, 0x8f, 0xf3, 0x17, 0xd6, 0x97, 0x1a, 0xe7, 0xac, 0x36, 0x46,
	0x82, 0x36, 0x1c, 0x0f, 0xea, 0xb9, 0xe1, 0xa0, 0x9e, 0xdf, 0x6e, 0xe1, 0xbc, 0xef, 0xa1, 0x55,
	0x98, 0xef, 0x93, 0x28, 0xf6, 0xc3, 0x80, 0xab, 0x14, 0xed, 0xca, 0xef, 0x41, 0xbd, 0xfc, 0xa2,
	0xfd, 0x8e, 0xb8, 0xf4, 0xb5, 0x28, 0xe0, 0x14, 0x61, 0x7d, 0xd2, 0x60, 0x5e, 0xb6, 0x42, 0x8f,
	0xa1, 0xd8, 0x25, 0xd4, 0x91, 0xa2, 0xe6, 0xdf, 0x45, 0x99, 0x41, 0xbb, 0xc4, 0x64, 0x4f, 0x06,
	0x75, 0x0d, 0x73, 0x16, 0xda, 0x80, 0x62, 0xdc, 0x23, 0x2e, 0xd7, 0xcc, 0x64, 0xbf, 0xec, 0x11,
	0xd7, 0x2e, 0x32, 0x36, 0xe6, 0x0c, 0xeb, 0x8b, 0x36, 0xfa, 0x74, 0x56, 0x43, 0x7b, 0x00, 0x72,
	0xea, 0xfb, 0x99, 0x23, 0xd8, 0x12, 0xa0, 0x6d, 0xcf, 0xae, 0xc8, 0x11, 0xe8, 0xe9, 0x51, 0x0b,
	0xeb, 0x6e, 0x5a, 0x45, 0x9b, 0x30, 0x17, 0x25, 0x1d, 0x12, 0xd7, 0xf2, 0xcb, 0x85, 0x6c, 0x6b,
	0x38, 0xe9, 0x10, 0x69, 0x4d, 0x50, 0xac, 0x6f, 0x63, 0x6f, 0xac, 0x88, 0xaa, 0x30, 0x77, 0xe8,
	0x07, 0x5e, 0x5c, 0xd3, 0x96, 0x0b, 0x2b, 0x3a, 0x16, 0x1b, 0x76, 0xca, 0xaf, 0x98, 0x2b, 0xe8,
	0x58, 0x6c, 0xd0, 0x33, 0x28, 0xb1, 0xc9, 0x78, 0x0e, 0x75, 0x6a, 0x05, 0x2e, 0x7d, 0x2f, 0x5b,
	0xba, 0xb1, 0x2b, 0xe1, 0x4f, 0x02, 0x1a, 0x1d, 0xe1, 0x11, 0xdb, 0x78, 0x04, 0xe5, 0x89, 0x12,
	0xba, 0x0e, 0x85, 0x43, 0x72, 0x24, 0xe3, 0xc5, 0x96, 0xcc, 0x42, 0xdf, 0xe9, 0x24, 0x69, 0xb2,
	0xc4, 0x66, 0x33, 0xbf, 0xa1, 0x59, 0x2e, 0x54, 0x9e, 0x12, 0x9a, 0xca, 0x90, 0xf7, 0x09, 0x89,
	0x29, 0x9b, 0xb1, 0x7c, 0x0d, 0xfb, 0xff, 0x18, 0xb3, 0xd1, 0x8c, 0xd3, 0xa3, 0x16, 0xd6, 0xdb,
	0x69, 0xd5, 0x7a, 0x0e, 0xe8, 0xac, 0x48, 0xdc, 0x0b, 0x83, 0x98, 0xa0, 0x07, 0x30, 0x2f, 0x21,
	0x52, 0xc2, 0xc8, 0x18, 0x40, 0x0a, 0xb5, 0x56, 0xe1, 0xc6, 0x8e, 0x1f, 0xa7, 0xcd, 0xe2, 0xd4,
	0x72, 0x15, 0xe6, 0x3e, 0x38, 0xd4, 0x7d, 0xcb, 0x5b, 0x95, 0xb0, 0xd8, 0x58, 0x7b, 0x50, 0x9d,
	0x04, 0x4b, 0xe9, 0x87, 0x50, 0x92, 0xfd, 0xc4, 0x5d, 0x65, 0x6b, 0x8f, 0xb0, 0xd6, 0x0e, 0x54,
	0xb7, 0x22, 0xe2, 0x50, 0x32, 0x35, 0xb0, 0xff, 0xfb, 0x94, 0x5d, 0x58, 0x9c, 0xea, 0x76, 0xa1,
	0xc9, 0xec, 0x40, 0xf5, 0x55, 0xcf, 0xbb, 0x44, 0x73, 0x53, 0xdd, 0x2e, 0x6a, 0xae, 0x45, 0x3a,
	0xe4, 0x92, 0xcc, 0xdd, 0x84, 0xc5, 0xa9, 0x6e, 0xc2, 0xdc, 0xfa, 0xaf, 0x02, 0x5c, 0x4b, 0x7f,
	0x2d, 0x48, 0xd4, 0xf7, 0x5d, 0x82, 0xde, 0x00, 0x8c, 0xc3, 0x87, 0x6e, 0x29, 0xda, 0x9f, 0x7b,
	0x00, 0xc6, 0xed, 0x19, 0x28, 0x39, 0x8a, 0x7d, 0xb8, 0x7a, 0x36, 0x5e, 0xe8, 0x8e, 0x82, 0xa6,
	0x08, 0xab, 0x71, 0x77, 0x26, 0x4e, 0x0a, 0xb4, 0xa1, 0x3c, 0x91, 0x10, 0xa4, 0x62, 0xaa, 0x12,
	0x69, 0xac, 0xcc, 0x06, 0x8e, 0x35, 0x26, 0x2e, 0x5a, 0xa9, 0xa1, 0x0a, 0x96, 0x52, 0x43, 0x9d,
	0x99, 0x36, 0x94, 0x27, 0xee, 0x4b, 0xa9, 0xa1, 0xca, 0x87, 0x52, 0x43, 0x79, 0xf5, 0x76, 0xed,
	0x78, 0x68, 0x6a, 0x27, 0x43, 0x53, 0xfb, 0x31, 0x34, 0xb5, 0xcf, 0xa7, 0x66, 0xee, 0xe4, 0xd4,
	0xcc, 0x7d, 0x3f, 0x35, 0x73, 0xed, 0x2b, 0xfc, 0x8f, 0xf8, 0xfe, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xbd, 0xa6, 0x3d, 0x98, 0xf5, 0x07, 0x00, 0x00,
}

func (this *BindingId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BindingId)
	if !ok {
		that2, ok := that.(BindingId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BindingServiceClient is the client API for BindingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BindingServiceClient interface {
	GetBinding(ctx context.Context, in *GetBindingRequest, opts ...grpc.CallOption) (*GetBindingResponse, error)
	ListBindings(ctx context.Context, in *ListBindingsRequest, opts ...grpc.CallOption) (*ListBindingsResponse, error)
	CreateBinding(ctx context.Context, in *CreateBindingRequest, opts ...grpc.CallOption) (*CreateBindingResponse, error)
	UpdateBinding(ctx context.Context, in *UpdateBindingRequest, opts ...grpc.CallOption) (*UpdateBindingResponse, error)
	DeleteBinding(ctx context.Context, in *DeleteBindingRequest, opts ...grpc.CallOption) (*DeleteBindingResponse, error)
}

type bindingServiceClient struct {
	cc *grpc.ClientConn
}

func NewBindingServiceClient(cc *grpc.ClientConn) BindingServiceClient {
	return &bindingServiceClient{cc}
}

func (c *bindingServiceClient) GetBinding(ctx context.Context, in *GetBindingRequest, opts ...grpc.CallOption) (*GetBindingResponse, error) {
	out := new(GetBindingResponse)
	err := c.cc.Invoke(ctx, "/atomix.runtime.v1.BindingService/GetBinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bindingServiceClient) ListBindings(ctx context.Context, in *ListBindingsRequest, opts ...grpc.CallOption) (*ListBindingsResponse, error) {
	out := new(ListBindingsResponse)
	err := c.cc.Invoke(ctx, "/atomix.runtime.v1.BindingService/ListBindings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bindingServiceClient) CreateBinding(ctx context.Context, in *CreateBindingRequest, opts ...grpc.CallOption) (*CreateBindingResponse, error) {
	out := new(CreateBindingResponse)
	err := c.cc.Invoke(ctx, "/atomix.runtime.v1.BindingService/CreateBinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bindingServiceClient) UpdateBinding(ctx context.Context, in *UpdateBindingRequest, opts ...grpc.CallOption) (*UpdateBindingResponse, error) {
	out := new(UpdateBindingResponse)
	err := c.cc.Invoke(ctx, "/atomix.runtime.v1.BindingService/UpdateBinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bindingServiceClient) DeleteBinding(ctx context.Context, in *DeleteBindingRequest, opts ...grpc.CallOption) (*DeleteBindingResponse, error) {
	out := new(DeleteBindingResponse)
	err := c.cc.Invoke(ctx, "/atomix.runtime.v1.BindingService/DeleteBinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BindingServiceServer is the server API for BindingService service.
type BindingServiceServer interface {
	GetBinding(context.Context, *GetBindingRequest) (*GetBindingResponse, error)
	ListBindings(context.Context, *ListBindingsRequest) (*ListBindingsResponse, error)
	CreateBinding(context.Context, *CreateBindingRequest) (*CreateBindingResponse, error)
	UpdateBinding(context.Context, *UpdateBindingRequest) (*UpdateBindingResponse, error)
	DeleteBinding(context.Context, *DeleteBindingRequest) (*DeleteBindingResponse, error)
}

// UnimplementedBindingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBindingServiceServer struct {
}

func (*UnimplementedBindingServiceServer) GetBinding(ctx context.Context, req *GetBindingRequest) (*GetBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBinding not implemented")
}
func (*UnimplementedBindingServiceServer) ListBindings(ctx context.Context, req *ListBindingsRequest) (*ListBindingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBindings not implemented")
}
func (*UnimplementedBindingServiceServer) CreateBinding(ctx context.Context, req *CreateBindingRequest) (*CreateBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBinding not implemented")
}
func (*UnimplementedBindingServiceServer) UpdateBinding(ctx context.Context, req *UpdateBindingRequest) (*UpdateBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBinding not implemented")
}
func (*UnimplementedBindingServiceServer) DeleteBinding(ctx context.Context, req *DeleteBindingRequest) (*DeleteBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBinding not implemented")
}

func RegisterBindingServiceServer(s *grpc.Server, srv BindingServiceServer) {
	s.RegisterService(&_BindingService_serviceDesc, srv)
}

func _BindingService_GetBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BindingServiceServer).GetBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.runtime.v1.BindingService/GetBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BindingServiceServer).GetBinding(ctx, req.(*GetBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BindingService_ListBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BindingServiceServer).ListBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.runtime.v1.BindingService/ListBindings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BindingServiceServer).ListBindings(ctx, req.(*ListBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BindingService_CreateBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BindingServiceServer).CreateBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.runtime.v1.BindingService/CreateBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BindingServiceServer).CreateBinding(ctx, req.(*CreateBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BindingService_UpdateBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BindingServiceServer).UpdateBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.runtime.v1.BindingService/UpdateBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BindingServiceServer).UpdateBinding(ctx, req.(*UpdateBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BindingService_DeleteBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BindingServiceServer).DeleteBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.runtime.v1.BindingService/DeleteBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BindingServiceServer).DeleteBinding(ctx, req.(*DeleteBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BindingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "atomix.runtime.v1.BindingService",
	HandlerType: (*BindingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBinding",
			Handler:    _BindingService_GetBinding_Handler,
		},
		{
			MethodName: "ListBindings",
			Handler:    _BindingService_ListBindings_Handler,
		},
		{
			MethodName: "CreateBinding",
			Handler:    _BindingService_CreateBinding_Handler,
		},
		{
			MethodName: "UpdateBinding",
			Handler:    _BindingService_UpdateBinding_Handler,
		},
		{
			MethodName: "DeleteBinding",
			Handler:    _BindingService_DeleteBinding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "atomix/runtime/v1/binding.proto",
}

func (m *BindingId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindingId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BindingId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBinding(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintBinding(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BindingMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindingMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BindingMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintBinding(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBinding(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Binding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Binding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Binding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBinding(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.BindingMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBinding(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BindingSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindingSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BindingSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBinding(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ClusterID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBinding(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BindingRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindingRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BindingRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for k := range m.Metadata {
			v := m.Metadata[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintBinding(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintBinding(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBinding(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Names) > 0 {
		for iNdEx := len(m.Names) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Names[iNdEx])
			copy(dAtA[i:], m.Names[iNdEx])
			i = encodeVarintBinding(dAtA, i, uint64(len(m.Names[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Kinds) > 0 {
		for iNdEx := len(m.Kinds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Kinds[iNdEx])
			copy(dAtA[i:], m.Kinds[iNdEx])
			i = encodeVarintBinding(dAtA, i, uint64(len(m.Kinds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetBindingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBindingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBindingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BindingID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBinding(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetBindingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBindingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBindingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Binding != nil {
		{
			size, err := m.Binding.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBinding(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListBindingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBindingsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBindingsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Watch {
		i--
		if m.Watch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListBindingsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBindingsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBindingsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bindings) > 0 {
		for iNdEx := len(m.Bindings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bindings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBinding(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateBindingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateBindingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateBindingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Binding != nil {
		{
			size, err := m.Binding.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBinding(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateBindingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateBindingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateBindingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Binding != nil {
		{
			size, err := m.Binding.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBinding(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateBindingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBindingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBindingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Binding != nil {
		{
			size, err := m.Binding.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBinding(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateBindingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBindingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBindingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Binding != nil {
		{
			size, err := m.Binding.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBinding(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteBindingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteBindingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteBindingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Binding != nil {
		{
			size, err := m.Binding.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBinding(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteBindingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteBindingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteBindingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintBinding(dAtA []byte, offset int, v uint64) int {
	offset -= sovBinding(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BindingId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovBinding(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBinding(uint64(l))
	}
	return n
}

func (m *BindingMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovBinding(uint64(l))
	if m.Version != 0 {
		n += 1 + sovBinding(uint64(m.Version))
	}
	return n
}

func (m *Binding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BindingMeta.Size()
	n += 1 + l + sovBinding(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovBinding(uint64(l))
	return n
}

func (m *BindingSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ClusterID.Size()
	n += 1 + l + sovBinding(uint64(l))
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovBinding(uint64(l))
		}
	}
	return n
}

func (m *BindingRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Kinds) > 0 {
		for _, s := range m.Kinds {
			l = len(s)
			n += 1 + l + sovBinding(uint64(l))
		}
	}
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			l = len(s)
			n += 1 + l + sovBinding(uint64(l))
		}
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBinding(uint64(len(k))) + 1 + len(v) + sovBinding(uint64(len(v)))
			n += mapEntrySize + 1 + sovBinding(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *GetBindingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BindingID.Size()
	n += 1 + l + sovBinding(uint64(l))
	return n
}

func (m *GetBindingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Binding != nil {
		l = m.Binding.Size()
		n += 1 + l + sovBinding(uint64(l))
	}
	return n
}

func (m *ListBindingsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Watch {
		n += 2
	}
	return n
}

func (m *ListBindingsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bindings) > 0 {
		for _, e := range m.Bindings {
			l = e.Size()
			n += 1 + l + sovBinding(uint64(l))
		}
	}
	return n
}

func (m *CreateBindingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Binding != nil {
		l = m.Binding.Size()
		n += 1 + l + sovBinding(uint64(l))
	}
	return n
}

func (m *CreateBindingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Binding != nil {
		l = m.Binding.Size()
		n += 1 + l + sovBinding(uint64(l))
	}
	return n
}

func (m *UpdateBindingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Binding != nil {
		l = m.Binding.Size()
		n += 1 + l + sovBinding(uint64(l))
	}
	return n
}

func (m *UpdateBindingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Binding != nil {
		l = m.Binding.Size()
		n += 1 + l + sovBinding(uint64(l))
	}
	return n
}

func (m *DeleteBindingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Binding != nil {
		l = m.Binding.Size()
		n += 1 + l + sovBinding(uint64(l))
	}
	return n
}

func (m *DeleteBindingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovBinding(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBinding(x uint64) (n int) {
	return sovBinding(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BindingId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBinding
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindingId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindingId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBinding
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBinding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBinding
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBinding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBinding(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBinding
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindingMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBinding
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindingMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindingMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBinding
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBinding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= ObjectVersion(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBinding(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBinding
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Binding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBinding
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Binding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Binding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindingMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBinding
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBinding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BindingMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBinding
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBinding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBinding(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBinding
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindingSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBinding
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindingSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindingSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBinding
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBinding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClusterID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBinding
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBinding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, BindingRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBinding(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBinding
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindingRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBinding
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindingRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindingRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kinds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBinding
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBinding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kinds = append(m.Kinds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBinding
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBinding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBinding
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBinding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBinding
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBinding
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBinding
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBinding
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBinding
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBinding
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthBinding
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBinding(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthBinding
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBinding(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBinding
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBindingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBinding
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBindingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBindingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindingID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBinding
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBinding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BindingID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBinding(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBinding
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBindingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBinding
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBindingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBindingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Binding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBinding
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBinding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Binding == nil {
				m.Binding = &Binding{}
			}
			if err := m.Binding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBinding(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBinding
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBindingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBinding
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBindingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBindingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Watch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Watch = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBinding(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBinding
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBindingsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBinding
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBindingsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBindingsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bindings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBinding
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBinding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bindings = append(m.Bindings, &Binding{})
			if err := m.Bindings[len(m.Bindings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBinding(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBinding
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateBindingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBinding
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateBindingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateBindingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Binding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBinding
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBinding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Binding == nil {
				m.Binding = &Binding{}
			}
			if err := m.Binding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBinding(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBinding
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateBindingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBinding
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateBindingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateBindingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Binding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBinding
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBinding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Binding == nil {
				m.Binding = &Binding{}
			}
			if err := m.Binding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBinding(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBinding
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBindingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBinding
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBindingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBindingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Binding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBinding
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBinding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Binding == nil {
				m.Binding = &Binding{}
			}
			if err := m.Binding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBinding(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBinding
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBindingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBinding
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBindingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBindingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Binding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBinding
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBinding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Binding == nil {
				m.Binding = &Binding{}
			}
			if err := m.Binding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBinding(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBinding
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteBindingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBinding
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteBindingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteBindingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Binding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBinding
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBinding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Binding == nil {
				m.Binding = &Binding{}
			}
			if err := m.Binding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBinding(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBinding
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteBindingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBinding
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteBindingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteBindingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBinding(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBinding
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBinding(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBinding
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBinding
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBinding
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBinding
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBinding
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBinding
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBinding        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBinding          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBinding = fmt.Errorf("proto: unexpected end of group")
)
