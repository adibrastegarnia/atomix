/*
SPDX-FileCopyrightText: 2022-present Open Networking Foundation <info@opennetworking.org>

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package atomix.list.v1;

import "atomix/primitive/v1/descriptor.proto";
import "atomix/time/v1/timestamp.proto";
import "gogoproto/gogo.proto";

// List is a service for a list primitive
service List {
    rpc Create (CreateRequest) returns (CreateResponse) {
        option (atomix.primitive.v1.operation_id) = 1;
        option (atomix.primitive.v1.operation_type) = CREATE;
    }

    rpc Close (CloseRequest) returns (CloseResponse) {
        option (atomix.primitive.v1.operation_id) = 2;
        option (atomix.primitive.v1.operation_type) = CLOSE;
    }

    // Size gets the number of elements in the list
    rpc Size (SizeRequest) returns (SizeResponse) {
        option (atomix.primitive.v1.operation_id) = 3;
        option (atomix.primitive.v1.operation_type) = QUERY;
    }

    // Append appends a value to the list
    rpc Append (AppendRequest) returns (AppendResponse) {
        option (atomix.primitive.v1.operation_id) = 4;
        option (atomix.primitive.v1.operation_type) = COMMAND;
    }

    // Insert inserts a value at a specific index in the list
    rpc Insert (InsertRequest) returns (InsertResponse) {
        option (atomix.primitive.v1.operation_id) = 5;
        option (atomix.primitive.v1.operation_type) = COMMAND;
    }

    // Get gets the value at an index in the list
    rpc Get (GetRequest) returns (GetResponse) {
        option (atomix.primitive.v1.operation_id) = 6;
        option (atomix.primitive.v1.operation_type) = QUERY;
    }

    // Set sets the value at an index in the list
    rpc Set (SetRequest) returns (SetResponse) {
        option (atomix.primitive.v1.operation_id) = 7;
        option (atomix.primitive.v1.operation_type) = COMMAND;
    }

    // Remove removes an element from the list
    rpc Remove (RemoveRequest) returns (RemoveResponse) {
        option (atomix.primitive.v1.operation_id) = 8;
        option (atomix.primitive.v1.operation_type) = COMMAND;
    }

    // Clear removes all elements from the list
    rpc Clear (ClearRequest) returns (ClearResponse) {
        option (atomix.primitive.v1.operation_id) = 9;
        option (atomix.primitive.v1.operation_type) = COMMAND;
    }

    // Events listens for change events
    rpc Events (EventsRequest) returns (stream EventsResponse) {
        option (atomix.primitive.v1.operation_id) = 10;
        option (atomix.primitive.v1.operation_type) = COMMAND;
    }

    // Elements streams all elements in the list
    rpc Elements (ElementsRequest) returns (stream ElementsResponse) {
        option (atomix.primitive.v1.operation_id) = 11;
        option (atomix.primitive.v1.operation_type) = QUERY;
    }
}

message CreateRequest {
    ListConfig config = 1 [
        (gogoproto.nullable) = false
    ];
}

message CreateResponse {

}

message CloseRequest {

}

message CloseResponse {

}

message ListConfig {

}

message SizeRequest {

}

message SizeResponse {
    uint32 size = 1;
}

message ContainsRequest {
    Value value = 1 [
        (gogoproto.nullable) = false
    ];
}

message ContainsResponse {
    bool contains = 1;
}

message AppendRequest {
    Value value = 1 [
        (gogoproto.nullable) = false
    ];
}

message AppendResponse {

}

message GetRequest {
    uint32 index = 1;
}

message GetResponse {
    Item item = 1 [
        (gogoproto.nullable) = false
    ];
}

message SetRequest {
    uint32 index = 1;
    Value value = 2 [
        (gogoproto.embed) = true,
        (gogoproto.nullable) = false
    ];
    atomix.time.v1.Timestamp timestamp = 3;
}

message SetResponse {
    Item item = 1 [
        (gogoproto.nullable) = false
    ];
}

message InsertRequest {
    uint32 index = 1;
    Value value = 2 [
        (gogoproto.embed) = true,
        (gogoproto.nullable) = false
    ];
}

message InsertResponse {
    Item item = 1 [
        (gogoproto.nullable) = false
    ];
}

message RemoveRequest {
    uint32 index = 1;
    atomix.time.v1.Timestamp timestamp = 2;
}

message RemoveResponse {
    Item item = 1 [
        (gogoproto.nullable) = false
    ];
}

message ClearRequest {

}

message ClearResponse {

}

message EventsRequest {
    bool replay = 1;
}

message EventsResponse {
    Event event = 1 [
        (gogoproto.nullable) = false
    ];
}

message Event {
    Type type = 1;
    Item item = 2 [
        (gogoproto.nullable) = false
    ];

    enum Type {
        NONE = 0;
        ADD = 1;
        REMOVE = 2;
        REPLAY = 3;
    }
}

message ElementsRequest {

}

message ElementsResponse {
    Item item = 1 [
        (gogoproto.nullable) = false
    ];
}

message Item {
    uint32 index = 1;
    Value value = 2 [
        (gogoproto.embed) = true,
        (gogoproto.nullable) = false
    ];
    atomix.time.v1.Timestamp timestamp = 3;
}

message Value {
    string value = 1;
}
