/*
SPDX-FileCopyrightText: 2022-present Open Networking Foundation <info@opennetworking.org>

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package atomix.election.v1;

import "atomix/primitive/v1/descriptor.proto";
import "atomix/primitive/v1/primitive.proto";
import "atomix/time/v1/timestamp.proto";
import "gogoproto/gogo.proto";

// LeaderElection is a service for a leader election primitive
service LeaderElection {
    // Create creates the leader election
    rpc Create (CreateRequest) returns (CreateResponse) {
        option (atomix.primitive.v1.operation_id) = 1;
        option (atomix.primitive.v1.operation_type) = CREATE;
    }

    // Close closes the leader election
    rpc Close (CloseRequest) returns (CloseResponse) {
        option (atomix.primitive.v1.operation_id) = 2;
        option (atomix.primitive.v1.operation_type) = CLOSE;
    }

    // Enter enters the leader election
    rpc Enter (EnterRequest) returns (EnterResponse) {
        option (atomix.primitive.v1.operation_id) = 3;
        option (atomix.primitive.v1.operation_type) = COMMAND;
    }

    // Withdraw withdraws a candidate from the leader election
    rpc Withdraw (WithdrawRequest) returns (WithdrawResponse) {
        option (atomix.primitive.v1.operation_id) = 4;
        option (atomix.primitive.v1.operation_type) = COMMAND;
    }

    // Anoint anoints a candidate leader
    rpc Anoint (AnointRequest) returns (AnointResponse) {
        option (atomix.primitive.v1.operation_id) = 5;
        option (atomix.primitive.v1.operation_type) = COMMAND;
    }

    // Promote promotes a candidate
    rpc Promote (PromoteRequest) returns (PromoteResponse) {
        option (atomix.primitive.v1.operation_id) = 6;
        option (atomix.primitive.v1.operation_type) = COMMAND;
    }

    // Evict evicts a candidate from the election
    rpc Evict (EvictRequest) returns (EvictResponse) {
        option (atomix.primitive.v1.operation_id) = 7;
        option (atomix.primitive.v1.operation_type) = COMMAND;
    }

    // GetTerm gets the current leadership term
    rpc GetTerm (GetTermRequest) returns (GetTermResponse) {
        option (atomix.primitive.v1.operation_id) = 8;
        option (atomix.primitive.v1.operation_type) = QUERY;
    }

    // Events listens for leadership events
    rpc Events (EventsRequest) returns (stream EventsResponse) {
        option (atomix.primitive.v1.operation_id) = 9;
        option (atomix.primitive.v1.operation_type) = COMMAND;
    }
}

message CreateRequest {
    atomix.primitive.v1.PrimitiveId id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    map<string, string> labels = 2;
}

message CreateResponse {

}

message CloseRequest {
    atomix.primitive.v1.PrimitiveId id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
}

message CloseResponse {

}

message EnterRequest {
    atomix.primitive.v1.PrimitiveId id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    string candidate = 2;
}

message EnterResponse {
    Term term = 1 [
        (gogoproto.nullable) = false
    ];
}

message WithdrawRequest {
    atomix.primitive.v1.PrimitiveId id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    string candidate = 2;
}

message WithdrawResponse {
    Term term = 1 [
        (gogoproto.nullable) = false
    ];
}

message AnointRequest {
    atomix.primitive.v1.PrimitiveId id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    string candidate = 2;
}

message AnointResponse {
    Term term = 1 [
        (gogoproto.nullable) = false
    ];
}

message PromoteRequest {
    atomix.primitive.v1.PrimitiveId id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    string candidate = 2;
}

message PromoteResponse {
    Term term = 1 [
        (gogoproto.nullable) = false
    ];
}

message EvictRequest {
    atomix.primitive.v1.PrimitiveId id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    string candidate = 2;
}

message EvictResponse {
    Term term = 1 [
        (gogoproto.nullable) = false
    ];
}

message GetTermRequest {
    atomix.primitive.v1.PrimitiveId id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
}

message GetTermResponse {
    Term term = 1 [
        (gogoproto.nullable) = false
    ];
}

message EventsRequest {
    atomix.primitive.v1.PrimitiveId id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
}

message EventsResponse {
    Event event = 1 [
        (gogoproto.nullable) = false
    ];
}

message Event {
    Type type = 1;
    Term term = 2 [
        (gogoproto.nullable) = false
    ];

    enum Type {
        NONE = 0;
        CHANGED = 1;
    }
}

message Term {
    string leader = 1;
    repeated string candidates = 2;
    atomix.time.v1.Timestamp timestamp = 3;
}
