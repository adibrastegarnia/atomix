/*
SPDX-FileCopyrightText: 2022-present Open Networking Foundation <info@opennetworking.org>

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package atomix.lock.v1;

import "google/protobuf/duration.proto";
import "atomix/primitive/v1/descriptor.proto";
import "atomix/primitive/v1/primitive.proto";
import "atomix/time/v1/timestamp.proto";
import "gogoproto/gogo.proto";

// Lock is a service for a lock primitive
service Lock {
    // Create creates the lock
    rpc Create (CreateRequest) returns (CreateResponse) {
        option (atomix.primitive.v1.operation_id) = 1;
        option (atomix.primitive.v1.operation_type) = CREATE;
    }

    // Close closes the lock
    rpc Close (CloseRequest) returns (CloseResponse) {
        option (atomix.primitive.v1.operation_id) = 2;
        option (atomix.primitive.v1.operation_type) = CLOSE;
    }

    // Lock attempts to acquire the lock
    rpc Lock (LockRequest) returns (LockResponse) {
        option (atomix.primitive.v1.operation_id) = 3;
        option (atomix.primitive.v1.operation_type) = COMMAND;
    }

    // Unlock releases the lock
    rpc Unlock (UnlockRequest) returns (UnlockResponse) {
        option (atomix.primitive.v1.operation_id) = 4;
        option (atomix.primitive.v1.operation_type) = COMMAND;
    }

    // GetLock gets the lock state
    rpc GetLock (GetLockRequest) returns (GetLockResponse) {
        option (atomix.primitive.v1.operation_id) = 5;
        option (atomix.primitive.v1.operation_type) = QUERY;
    }
}

message CreateRequest {
    atomix.primitive.v1.PrimitiveId id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    map<string, string> tags = 2;
}

message CreateResponse {

}

message CloseRequest {
    atomix.primitive.v1.PrimitiveId id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
}

message CloseResponse {

}

message LockRequest {
    atomix.primitive.v1.PrimitiveId id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    google.protobuf.Duration timeout = 2 [
        (gogoproto.stdduration) = true
    ];
}

message LockResponse {
    LockInstance lock = 1 [
        (gogoproto.nullable) = false
    ];
}

message UnlockRequest {
    atomix.primitive.v1.PrimitiveId id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    LockInstance lock = 2 [
        (gogoproto.nullable) = false
    ];
}

message UnlockResponse {
    LockInstance lock = 1 [
        (gogoproto.nullable) = false
    ];
}

message GetLockRequest {
    atomix.primitive.v1.PrimitiveId id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    LockInstance lock = 2 [
        (gogoproto.nullable) = false
    ];
}

message GetLockResponse {
    LockInstance lock = 1 [
        (gogoproto.nullable) = false
    ];
}

message LockInstance {
    atomix.time.v1.Timestamp timestamp = 1;
    State state = 2;

    enum State {
        UNLOCKED = 0;
        LOCKED = 1;
    }
}
