// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/primitive/v1/primitive.proto

package v1

import (
	context "context"
	fmt "fmt"
	v1 "github.com/atomix/runtime/api/atomix/runtime/v1"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OpenPrimitiveRequest struct {
	Primitive v1.Primitive `protobuf:"bytes,1,opt,name=primitive,proto3" json:"primitive"`
}

func (m *OpenPrimitiveRequest) Reset()         { *m = OpenPrimitiveRequest{} }
func (m *OpenPrimitiveRequest) String() string { return proto.CompactTextString(m) }
func (*OpenPrimitiveRequest) ProtoMessage()    {}
func (*OpenPrimitiveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce01ee29cb809ef2, []int{0}
}
func (m *OpenPrimitiveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenPrimitiveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenPrimitiveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenPrimitiveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenPrimitiveRequest.Merge(m, src)
}
func (m *OpenPrimitiveRequest) XXX_Size() int {
	return m.Size()
}
func (m *OpenPrimitiveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenPrimitiveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OpenPrimitiveRequest proto.InternalMessageInfo

func (m *OpenPrimitiveRequest) GetPrimitive() v1.Primitive {
	if m != nil {
		return m.Primitive
	}
	return v1.Primitive{}
}

type OpenPrimitiveResponse struct {
}

func (m *OpenPrimitiveResponse) Reset()         { *m = OpenPrimitiveResponse{} }
func (m *OpenPrimitiveResponse) String() string { return proto.CompactTextString(m) }
func (*OpenPrimitiveResponse) ProtoMessage()    {}
func (*OpenPrimitiveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce01ee29cb809ef2, []int{1}
}
func (m *OpenPrimitiveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenPrimitiveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenPrimitiveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenPrimitiveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenPrimitiveResponse.Merge(m, src)
}
func (m *OpenPrimitiveResponse) XXX_Size() int {
	return m.Size()
}
func (m *OpenPrimitiveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenPrimitiveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OpenPrimitiveResponse proto.InternalMessageInfo

type ClosePrimitiveRequest struct {
	PrimitiveID v1.PrimitiveId `protobuf:"bytes,1,opt,name=primitive_id,json=primitiveId,proto3" json:"primitive_id"`
}

func (m *ClosePrimitiveRequest) Reset()         { *m = ClosePrimitiveRequest{} }
func (m *ClosePrimitiveRequest) String() string { return proto.CompactTextString(m) }
func (*ClosePrimitiveRequest) ProtoMessage()    {}
func (*ClosePrimitiveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce01ee29cb809ef2, []int{2}
}
func (m *ClosePrimitiveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClosePrimitiveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClosePrimitiveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClosePrimitiveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClosePrimitiveRequest.Merge(m, src)
}
func (m *ClosePrimitiveRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClosePrimitiveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClosePrimitiveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClosePrimitiveRequest proto.InternalMessageInfo

func (m *ClosePrimitiveRequest) GetPrimitiveID() v1.PrimitiveId {
	if m != nil {
		return m.PrimitiveID
	}
	return v1.PrimitiveId{}
}

type ClosePrimitiveResponse struct {
}

func (m *ClosePrimitiveResponse) Reset()         { *m = ClosePrimitiveResponse{} }
func (m *ClosePrimitiveResponse) String() string { return proto.CompactTextString(m) }
func (*ClosePrimitiveResponse) ProtoMessage()    {}
func (*ClosePrimitiveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce01ee29cb809ef2, []int{3}
}
func (m *ClosePrimitiveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClosePrimitiveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClosePrimitiveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClosePrimitiveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClosePrimitiveResponse.Merge(m, src)
}
func (m *ClosePrimitiveResponse) XXX_Size() int {
	return m.Size()
}
func (m *ClosePrimitiveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClosePrimitiveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClosePrimitiveResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*OpenPrimitiveRequest)(nil), "atomix.primitive.v1.OpenPrimitiveRequest")
	proto.RegisterType((*OpenPrimitiveResponse)(nil), "atomix.primitive.v1.OpenPrimitiveResponse")
	proto.RegisterType((*ClosePrimitiveRequest)(nil), "atomix.primitive.v1.ClosePrimitiveRequest")
	proto.RegisterType((*ClosePrimitiveResponse)(nil), "atomix.primitive.v1.ClosePrimitiveResponse")
}

func init() {
	proto.RegisterFile("atomix/primitive/v1/primitive.proto", fileDescriptor_ce01ee29cb809ef2)
}

var fileDescriptor_ce01ee29cb809ef2 = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4e, 0x2c, 0xc9, 0xcf,
	0xcd, 0xac, 0xd0, 0x2f, 0x28, 0xca, 0xcc, 0xcd, 0x2c, 0xc9, 0x2c, 0x4b, 0xd5, 0x2f, 0x33, 0x44,
	0x70, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x84, 0x21, 0x8a, 0xf4, 0x10, 0xe2, 0x65, 0x86,
	0x52, 0x8a, 0x50, 0x9d, 0x45, 0xa5, 0x79, 0x25, 0x99, 0xb9, 0xd8, 0xf4, 0x49, 0x89, 0xa4, 0xe7,
	0xa7, 0xe7, 0x83, 0x99, 0xfa, 0x20, 0x16, 0x44, 0x54, 0x29, 0x82, 0x4b, 0xc4, 0xbf, 0x20, 0x35,
	0x2f, 0x00, 0xa6, 0x38, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0xc8, 0x81, 0x8b, 0x13, 0x6e,
	0x80, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0xb7, 0x91, 0x8c, 0x1e, 0xd4, 0x66, 0xa8, 0x25, 0x7a, 0x65,
	0x86, 0x7a, 0x70, 0x7d, 0x4e, 0x2c, 0x27, 0xee, 0xc9, 0x33, 0x04, 0x21, 0x34, 0x29, 0x89, 0x73,
	0x89, 0xa2, 0x99, 0x5c, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0xaa, 0x94, 0xcf, 0x25, 0xea, 0x9c, 0x93,
	0x5f, 0x9c, 0x8a, 0x61, 0x67, 0x18, 0x17, 0x0f, 0x5c, 0x7b, 0x7c, 0x66, 0x0a, 0xd4, 0x5a, 0x39,
	0x7c, 0xd6, 0x7a, 0xa6, 0x38, 0x09, 0x83, 0x2c, 0x7e, 0x74, 0x4f, 0x9e, 0x1b, 0x21, 0xe8, 0x12,
	0xc4, 0x5d, 0x80, 0x50, 0xa1, 0x24, 0xc1, 0x25, 0x86, 0x6e, 0x21, 0xc4, 0x29, 0x46, 0x97, 0x19,
	0xb9, 0x04, 0xe0, 0xa2, 0xbe, 0x89, 0x79, 0x89, 0xe9, 0xa9, 0x45, 0x42, 0xb1, 0x5c, 0x2c, 0x20,
	0x87, 0x0b, 0x69, 0xea, 0x61, 0x09, 0x69, 0x3d, 0x6c, 0xa1, 0x25, 0xa5, 0x45, 0x8c, 0x52, 0x88,
	0x9d, 0x42, 0x09, 0x5c, 0xac, 0x60, 0xd7, 0x08, 0x61, 0xd7, 0x84, 0x35, 0x68, 0xa4, 0xb4, 0x89,
	0x52, 0x0b, 0xb1, 0xc1, 0x49, 0xe2, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c,
	0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0x92,
	0xd8, 0xc0, 0x91, 0x6e, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x85, 0x9d, 0x78, 0x71, 0x69, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PrimitiveManagerClient is the client API for PrimitiveManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PrimitiveManagerClient interface {
	Open(ctx context.Context, in *OpenPrimitiveRequest, opts ...grpc.CallOption) (*OpenPrimitiveResponse, error)
	Close(ctx context.Context, in *ClosePrimitiveRequest, opts ...grpc.CallOption) (*ClosePrimitiveResponse, error)
}

type primitiveManagerClient struct {
	cc *grpc.ClientConn
}

func NewPrimitiveManagerClient(cc *grpc.ClientConn) PrimitiveManagerClient {
	return &primitiveManagerClient{cc}
}

func (c *primitiveManagerClient) Open(ctx context.Context, in *OpenPrimitiveRequest, opts ...grpc.CallOption) (*OpenPrimitiveResponse, error) {
	out := new(OpenPrimitiveResponse)
	err := c.cc.Invoke(ctx, "/atomix.primitive.v1.PrimitiveManager/Open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *primitiveManagerClient) Close(ctx context.Context, in *ClosePrimitiveRequest, opts ...grpc.CallOption) (*ClosePrimitiveResponse, error) {
	out := new(ClosePrimitiveResponse)
	err := c.cc.Invoke(ctx, "/atomix.primitive.v1.PrimitiveManager/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrimitiveManagerServer is the server API for PrimitiveManager service.
type PrimitiveManagerServer interface {
	Open(context.Context, *OpenPrimitiveRequest) (*OpenPrimitiveResponse, error)
	Close(context.Context, *ClosePrimitiveRequest) (*ClosePrimitiveResponse, error)
}

// UnimplementedPrimitiveManagerServer can be embedded to have forward compatible implementations.
type UnimplementedPrimitiveManagerServer struct {
}

func (*UnimplementedPrimitiveManagerServer) Open(ctx context.Context, req *OpenPrimitiveRequest) (*OpenPrimitiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (*UnimplementedPrimitiveManagerServer) Close(ctx context.Context, req *ClosePrimitiveRequest) (*ClosePrimitiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}

func RegisterPrimitiveManagerServer(s *grpc.Server, srv PrimitiveManagerServer) {
	s.RegisterService(&_PrimitiveManager_serviceDesc, srv)
}

func _PrimitiveManager_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenPrimitiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrimitiveManagerServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.primitive.v1.PrimitiveManager/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrimitiveManagerServer).Open(ctx, req.(*OpenPrimitiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrimitiveManager_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClosePrimitiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrimitiveManagerServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.primitive.v1.PrimitiveManager/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrimitiveManagerServer).Close(ctx, req.(*ClosePrimitiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PrimitiveManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "atomix.primitive.v1.PrimitiveManager",
	HandlerType: (*PrimitiveManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Open",
			Handler:    _PrimitiveManager_Open_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _PrimitiveManager_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "atomix/primitive/v1/primitive.proto",
}

func (m *OpenPrimitiveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenPrimitiveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenPrimitiveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Primitive.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPrimitive(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *OpenPrimitiveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenPrimitiveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenPrimitiveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ClosePrimitiveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClosePrimitiveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClosePrimitiveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PrimitiveID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPrimitive(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClosePrimitiveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClosePrimitiveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClosePrimitiveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPrimitive(dAtA []byte, offset int, v uint64) int {
	offset -= sovPrimitive(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OpenPrimitiveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Primitive.Size()
	n += 1 + l + sovPrimitive(uint64(l))
	return n
}

func (m *OpenPrimitiveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ClosePrimitiveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PrimitiveID.Size()
	n += 1 + l + sovPrimitive(uint64(l))
	return n
}

func (m *ClosePrimitiveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPrimitive(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPrimitive(x uint64) (n int) {
	return sovPrimitive(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OpenPrimitiveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrimitive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenPrimitiveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenPrimitiveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Primitive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrimitive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrimitive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrimitive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Primitive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrimitive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrimitive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenPrimitiveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrimitive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenPrimitiveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenPrimitiveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPrimitive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrimitive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClosePrimitiveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrimitive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClosePrimitiveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClosePrimitiveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimitiveID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrimitive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrimitive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrimitive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrimitiveID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrimitive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrimitive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClosePrimitiveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrimitive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClosePrimitiveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClosePrimitiveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPrimitive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrimitive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrimitive(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrimitive
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrimitive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrimitive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPrimitive
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPrimitive
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPrimitive
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPrimitive        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrimitive          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPrimitive = fmt.Errorf("proto: unexpected end of group")
)
