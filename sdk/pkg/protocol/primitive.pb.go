// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocol/primitive.proto

package protocol

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Failure_Status int32

const (
	Failure_UNKNOWN        Failure_Status = 0
	Failure_ERROR          Failure_Status = 1
	Failure_CANCELED       Failure_Status = 2
	Failure_NOT_FOUND      Failure_Status = 3
	Failure_ALREADY_EXISTS Failure_Status = 4
	Failure_UNAUTHORIZED   Failure_Status = 5
	Failure_FORBIDDEN      Failure_Status = 6
	Failure_CONFLICT       Failure_Status = 7
	Failure_INVALID        Failure_Status = 8
	Failure_UNAVAILABLE    Failure_Status = 9
	Failure_NOT_SUPPORTED  Failure_Status = 10
	Failure_TIMEOUT        Failure_Status = 11
	Failure_FAULT          Failure_Status = 12
	Failure_INTERNAL       Failure_Status = 13
)

var Failure_Status_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "ERROR",
	2:  "CANCELED",
	3:  "NOT_FOUND",
	4:  "ALREADY_EXISTS",
	5:  "UNAUTHORIZED",
	6:  "FORBIDDEN",
	7:  "CONFLICT",
	8:  "INVALID",
	9:  "UNAVAILABLE",
	10: "NOT_SUPPORTED",
	11: "TIMEOUT",
	12: "FAULT",
	13: "INTERNAL",
}

var Failure_Status_value = map[string]int32{
	"UNKNOWN":        0,
	"ERROR":          1,
	"CANCELED":       2,
	"NOT_FOUND":      3,
	"ALREADY_EXISTS": 4,
	"UNAUTHORIZED":   5,
	"FORBIDDEN":      6,
	"CONFLICT":       7,
	"INVALID":        8,
	"UNAVAILABLE":    9,
	"NOT_SUPPORTED":  10,
	"TIMEOUT":        11,
	"FAULT":          12,
	"INTERNAL":       13,
}

func (x Failure_Status) String() string {
	return proto.EnumName(Failure_Status_name, int32(x))
}

func (Failure_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7b9939e8594ea433, []int{8, 0}
}

type CreatePrimitiveInput struct {
	PrimitiveSpec `protobuf:"bytes,1,opt,name=spec,proto3,embedded=spec" json:"spec"`
}

func (m *CreatePrimitiveInput) Reset()         { *m = CreatePrimitiveInput{} }
func (m *CreatePrimitiveInput) String() string { return proto.CompactTextString(m) }
func (*CreatePrimitiveInput) ProtoMessage()    {}
func (*CreatePrimitiveInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b9939e8594ea433, []int{0}
}
func (m *CreatePrimitiveInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePrimitiveInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePrimitiveInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePrimitiveInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePrimitiveInput.Merge(m, src)
}
func (m *CreatePrimitiveInput) XXX_Size() int {
	return m.Size()
}
func (m *CreatePrimitiveInput) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePrimitiveInput.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePrimitiveInput proto.InternalMessageInfo

type CreatePrimitiveOutput struct {
	PrimitiveID PrimitiveID `protobuf:"varint,1,opt,name=primitive_id,json=primitiveId,proto3,casttype=PrimitiveID" json:"primitive_id,omitempty"`
}

func (m *CreatePrimitiveOutput) Reset()         { *m = CreatePrimitiveOutput{} }
func (m *CreatePrimitiveOutput) String() string { return proto.CompactTextString(m) }
func (*CreatePrimitiveOutput) ProtoMessage()    {}
func (*CreatePrimitiveOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b9939e8594ea433, []int{1}
}
func (m *CreatePrimitiveOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePrimitiveOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePrimitiveOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePrimitiveOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePrimitiveOutput.Merge(m, src)
}
func (m *CreatePrimitiveOutput) XXX_Size() int {
	return m.Size()
}
func (m *CreatePrimitiveOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePrimitiveOutput.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePrimitiveOutput proto.InternalMessageInfo

func (m *CreatePrimitiveOutput) GetPrimitiveID() PrimitiveID {
	if m != nil {
		return m.PrimitiveID
	}
	return 0
}

type ClosePrimitiveInput struct {
	PrimitiveID PrimitiveID `protobuf:"varint,1,opt,name=primitive_id,json=primitiveId,proto3,casttype=PrimitiveID" json:"primitive_id,omitempty"`
}

func (m *ClosePrimitiveInput) Reset()         { *m = ClosePrimitiveInput{} }
func (m *ClosePrimitiveInput) String() string { return proto.CompactTextString(m) }
func (*ClosePrimitiveInput) ProtoMessage()    {}
func (*ClosePrimitiveInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b9939e8594ea433, []int{2}
}
func (m *ClosePrimitiveInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClosePrimitiveInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClosePrimitiveInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClosePrimitiveInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClosePrimitiveInput.Merge(m, src)
}
func (m *ClosePrimitiveInput) XXX_Size() int {
	return m.Size()
}
func (m *ClosePrimitiveInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ClosePrimitiveInput.DiscardUnknown(m)
}

var xxx_messageInfo_ClosePrimitiveInput proto.InternalMessageInfo

func (m *ClosePrimitiveInput) GetPrimitiveID() PrimitiveID {
	if m != nil {
		return m.PrimitiveID
	}
	return 0
}

type ClosePrimitiveOutput struct {
}

func (m *ClosePrimitiveOutput) Reset()         { *m = ClosePrimitiveOutput{} }
func (m *ClosePrimitiveOutput) String() string { return proto.CompactTextString(m) }
func (*ClosePrimitiveOutput) ProtoMessage()    {}
func (*ClosePrimitiveOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b9939e8594ea433, []int{3}
}
func (m *ClosePrimitiveOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClosePrimitiveOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClosePrimitiveOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClosePrimitiveOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClosePrimitiveOutput.Merge(m, src)
}
func (m *ClosePrimitiveOutput) XXX_Size() int {
	return m.Size()
}
func (m *ClosePrimitiveOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_ClosePrimitiveOutput.DiscardUnknown(m)
}

var xxx_messageInfo_ClosePrimitiveOutput proto.InternalMessageInfo

type PrimitiveProposalInput struct {
	PrimitiveID PrimitiveID `protobuf:"varint,1,opt,name=primitive_id,json=primitiveId,proto3,casttype=PrimitiveID" json:"primitive_id,omitempty"`
	Payload     []byte      `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *PrimitiveProposalInput) Reset()         { *m = PrimitiveProposalInput{} }
func (m *PrimitiveProposalInput) String() string { return proto.CompactTextString(m) }
func (*PrimitiveProposalInput) ProtoMessage()    {}
func (*PrimitiveProposalInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b9939e8594ea433, []int{4}
}
func (m *PrimitiveProposalInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrimitiveProposalInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrimitiveProposalInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrimitiveProposalInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimitiveProposalInput.Merge(m, src)
}
func (m *PrimitiveProposalInput) XXX_Size() int {
	return m.Size()
}
func (m *PrimitiveProposalInput) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimitiveProposalInput.DiscardUnknown(m)
}

var xxx_messageInfo_PrimitiveProposalInput proto.InternalMessageInfo

func (m *PrimitiveProposalInput) GetPrimitiveID() PrimitiveID {
	if m != nil {
		return m.PrimitiveID
	}
	return 0
}

func (m *PrimitiveProposalInput) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type PrimitiveProposalOutput struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *PrimitiveProposalOutput) Reset()         { *m = PrimitiveProposalOutput{} }
func (m *PrimitiveProposalOutput) String() string { return proto.CompactTextString(m) }
func (*PrimitiveProposalOutput) ProtoMessage()    {}
func (*PrimitiveProposalOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b9939e8594ea433, []int{5}
}
func (m *PrimitiveProposalOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrimitiveProposalOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrimitiveProposalOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrimitiveProposalOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimitiveProposalOutput.Merge(m, src)
}
func (m *PrimitiveProposalOutput) XXX_Size() int {
	return m.Size()
}
func (m *PrimitiveProposalOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimitiveProposalOutput.DiscardUnknown(m)
}

var xxx_messageInfo_PrimitiveProposalOutput proto.InternalMessageInfo

func (m *PrimitiveProposalOutput) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type PrimitiveQueryInput struct {
	PrimitiveID PrimitiveID `protobuf:"varint,1,opt,name=primitive_id,json=primitiveId,proto3,casttype=PrimitiveID" json:"primitive_id,omitempty"`
	Payload     []byte      `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *PrimitiveQueryInput) Reset()         { *m = PrimitiveQueryInput{} }
func (m *PrimitiveQueryInput) String() string { return proto.CompactTextString(m) }
func (*PrimitiveQueryInput) ProtoMessage()    {}
func (*PrimitiveQueryInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b9939e8594ea433, []int{6}
}
func (m *PrimitiveQueryInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrimitiveQueryInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrimitiveQueryInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrimitiveQueryInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimitiveQueryInput.Merge(m, src)
}
func (m *PrimitiveQueryInput) XXX_Size() int {
	return m.Size()
}
func (m *PrimitiveQueryInput) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimitiveQueryInput.DiscardUnknown(m)
}

var xxx_messageInfo_PrimitiveQueryInput proto.InternalMessageInfo

func (m *PrimitiveQueryInput) GetPrimitiveID() PrimitiveID {
	if m != nil {
		return m.PrimitiveID
	}
	return 0
}

func (m *PrimitiveQueryInput) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type PrimitiveQueryOutput struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *PrimitiveQueryOutput) Reset()         { *m = PrimitiveQueryOutput{} }
func (m *PrimitiveQueryOutput) String() string { return proto.CompactTextString(m) }
func (*PrimitiveQueryOutput) ProtoMessage()    {}
func (*PrimitiveQueryOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b9939e8594ea433, []int{7}
}
func (m *PrimitiveQueryOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrimitiveQueryOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrimitiveQueryOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrimitiveQueryOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimitiveQueryOutput.Merge(m, src)
}
func (m *PrimitiveQueryOutput) XXX_Size() int {
	return m.Size()
}
func (m *PrimitiveQueryOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimitiveQueryOutput.DiscardUnknown(m)
}

var xxx_messageInfo_PrimitiveQueryOutput proto.InternalMessageInfo

func (m *PrimitiveQueryOutput) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type Failure struct {
	Status  Failure_Status `protobuf:"varint,1,opt,name=status,proto3,enum=atomix.runtime.sdk.protocol.v1.Failure_Status" json:"status,omitempty"`
	Message string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Failure) Reset()         { *m = Failure{} }
func (m *Failure) String() string { return proto.CompactTextString(m) }
func (*Failure) ProtoMessage()    {}
func (*Failure) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b9939e8594ea433, []int{8}
}
func (m *Failure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Failure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Failure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Failure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Failure.Merge(m, src)
}
func (m *Failure) XXX_Size() int {
	return m.Size()
}
func (m *Failure) XXX_DiscardUnknown() {
	xxx_messageInfo_Failure.DiscardUnknown(m)
}

var xxx_messageInfo_Failure proto.InternalMessageInfo

func (m *Failure) GetStatus() Failure_Status {
	if m != nil {
		return m.Status
	}
	return Failure_UNKNOWN
}

func (m *Failure) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PrimitiveSnapshot struct {
	PrimitiveID PrimitiveID   `protobuf:"varint,1,opt,name=primitive_id,json=primitiveId,proto3,casttype=PrimitiveID" json:"primitive_id,omitempty"`
	Spec        PrimitiveSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec"`
}

func (m *PrimitiveSnapshot) Reset()         { *m = PrimitiveSnapshot{} }
func (m *PrimitiveSnapshot) String() string { return proto.CompactTextString(m) }
func (*PrimitiveSnapshot) ProtoMessage()    {}
func (*PrimitiveSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b9939e8594ea433, []int{9}
}
func (m *PrimitiveSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrimitiveSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrimitiveSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrimitiveSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimitiveSnapshot.Merge(m, src)
}
func (m *PrimitiveSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *PrimitiveSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimitiveSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_PrimitiveSnapshot proto.InternalMessageInfo

func (m *PrimitiveSnapshot) GetPrimitiveID() PrimitiveID {
	if m != nil {
		return m.PrimitiveID
	}
	return 0
}

func (m *PrimitiveSnapshot) GetSpec() PrimitiveSpec {
	if m != nil {
		return m.Spec
	}
	return PrimitiveSpec{}
}

type PrimitiveSpec struct {
	Service   string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Profile   string `protobuf:"bytes,4,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (m *PrimitiveSpec) Reset()         { *m = PrimitiveSpec{} }
func (m *PrimitiveSpec) String() string { return proto.CompactTextString(m) }
func (*PrimitiveSpec) ProtoMessage()    {}
func (*PrimitiveSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b9939e8594ea433, []int{10}
}
func (m *PrimitiveSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrimitiveSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrimitiveSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrimitiveSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimitiveSpec.Merge(m, src)
}
func (m *PrimitiveSpec) XXX_Size() int {
	return m.Size()
}
func (m *PrimitiveSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimitiveSpec.DiscardUnknown(m)
}

var xxx_messageInfo_PrimitiveSpec proto.InternalMessageInfo

func (m *PrimitiveSpec) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *PrimitiveSpec) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *PrimitiveSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PrimitiveSpec) GetProfile() string {
	if m != nil {
		return m.Profile
	}
	return ""
}

func init() {
	proto.RegisterEnum("atomix.runtime.sdk.protocol.v1.Failure_Status", Failure_Status_name, Failure_Status_value)
	proto.RegisterType((*CreatePrimitiveInput)(nil), "atomix.runtime.sdk.protocol.v1.CreatePrimitiveInput")
	proto.RegisterType((*CreatePrimitiveOutput)(nil), "atomix.runtime.sdk.protocol.v1.CreatePrimitiveOutput")
	proto.RegisterType((*ClosePrimitiveInput)(nil), "atomix.runtime.sdk.protocol.v1.ClosePrimitiveInput")
	proto.RegisterType((*ClosePrimitiveOutput)(nil), "atomix.runtime.sdk.protocol.v1.ClosePrimitiveOutput")
	proto.RegisterType((*PrimitiveProposalInput)(nil), "atomix.runtime.sdk.protocol.v1.PrimitiveProposalInput")
	proto.RegisterType((*PrimitiveProposalOutput)(nil), "atomix.runtime.sdk.protocol.v1.PrimitiveProposalOutput")
	proto.RegisterType((*PrimitiveQueryInput)(nil), "atomix.runtime.sdk.protocol.v1.PrimitiveQueryInput")
	proto.RegisterType((*PrimitiveQueryOutput)(nil), "atomix.runtime.sdk.protocol.v1.PrimitiveQueryOutput")
	proto.RegisterType((*Failure)(nil), "atomix.runtime.sdk.protocol.v1.Failure")
	proto.RegisterType((*PrimitiveSnapshot)(nil), "atomix.runtime.sdk.protocol.v1.PrimitiveSnapshot")
	proto.RegisterType((*PrimitiveSpec)(nil), "atomix.runtime.sdk.protocol.v1.PrimitiveSpec")
}

func init() { proto.RegisterFile("protocol/primitive.proto", fileDescriptor_7b9939e8594ea433) }

var fileDescriptor_7b9939e8594ea433 = []byte{
	// 645 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xcd, 0x4e, 0xdb, 0x4a,
	0x14, 0x8e, 0x43, 0x48, 0xc8, 0x49, 0xc2, 0x1d, 0x86, 0x5c, 0xae, 0x85, 0xae, 0x1c, 0xe4, 0x15,
	0x9b, 0xeb, 0xdc, 0xc2, 0x13, 0x38, 0xb1, 0xd3, 0x5a, 0xb8, 0x76, 0x3a, 0xb1, 0x29, 0x65, 0x83,
	0x4c, 0x32, 0xa4, 0x56, 0x9d, 0x8c, 0xe5, 0x1f, 0x54, 0xde, 0xa2, 0x6f, 0xd0, 0xa7, 0xa9, 0xc4,
	0x92, 0x5d, 0xbb, 0x42, 0x55, 0x78, 0x8b, 0xae, 0x2a, 0x4f, 0x9c, 0xd0, 0x50, 0xa9, 0x48, 0x15,
	0xea, 0x6e, 0xbe, 0x33, 0xe7, 0xfb, 0x91, 0xcf, 0xf8, 0x80, 0x18, 0x46, 0x2c, 0x61, 0x43, 0x16,
	0xb4, 0xc3, 0xc8, 0x9f, 0xf8, 0x89, 0x7f, 0x49, 0x15, 0x5e, 0xc2, 0x92, 0x97, 0xb0, 0x89, 0xff,
	0x5e, 0x89, 0xd2, 0x69, 0xe2, 0x4f, 0xa8, 0x12, 0x8f, 0xde, 0x29, 0x8b, 0x66, 0xe5, 0xf2, 0xd9,
	0xae, 0x34, 0x66, 0x6c, 0x1c, 0xd0, 0x36, 0xaf, 0x9d, 0xa7, 0x17, 0xed, 0x51, 0x1a, 0x79, 0x89,
	0xcf, 0xa6, 0xf3, 0xae, 0xdd, 0xd6, 0xc3, 0xfb, 0x4c, 0x25, 0x4e, 0xbc, 0x49, 0x98, 0x37, 0x34,
	0xc7, 0x6c, 0xcc, 0xf8, 0xb1, 0x9d, 0x9d, 0xe6, 0x55, 0x79, 0x08, 0xcd, 0x6e, 0x44, 0xbd, 0x84,
	0xf6, 0x17, 0x79, 0x8c, 0x69, 0x98, 0x26, 0xf8, 0x08, 0x4a, 0x71, 0x48, 0x87, 0xa2, 0xb0, 0x27,
	0xec, 0xd7, 0x0e, 0xfe, 0x53, 0x7e, 0x9d, 0x4e, 0x59, 0xb2, 0x07, 0x21, 0x1d, 0x76, 0x36, 0xae,
	0x6f, 0x5b, 0x85, 0x9b, 0xdb, 0x96, 0x40, 0xb8, 0x88, 0x7c, 0x0a, 0x7f, 0x3f, 0x30, 0xb1, 0xd3,
	0x24, 0x73, 0x51, 0xa1, 0xbe, 0xfc, 0x0e, 0x67, 0xfe, 0x88, 0xbb, 0x95, 0x3a, 0xd2, 0xec, 0xb6,
	0x55, 0xbb, 0xcf, 0xa3, 0x7d, 0x5b, 0x85, 0xa4, 0xb6, 0xe4, 0x18, 0x23, 0xf9, 0x04, 0xb6, 0xbb,
	0x01, 0x8b, 0x1f, 0xe6, 0x7f, 0x02, 0xe5, 0x1d, 0x68, 0xae, 0x2a, 0xcf, 0x43, 0xcb, 0x29, 0xec,
	0x2c, 0x4b, 0xfd, 0x88, 0x85, 0x2c, 0xf6, 0x82, 0xa7, 0x32, 0xc5, 0x22, 0x54, 0x42, 0xef, 0x2a,
	0x60, 0xde, 0x48, 0x2c, 0xee, 0x09, 0xfb, 0x75, 0xb2, 0x80, 0xf2, 0x21, 0xfc, 0xf3, 0x93, 0x6d,
	0xfe, 0x19, 0x7f, 0x20, 0x09, 0xab, 0xa4, 0x08, 0xb6, 0x97, 0xa4, 0x57, 0x29, 0x8d, 0xae, 0xfe,
	0x40, 0xd0, 0xff, 0xa1, 0xb9, 0xea, 0xf9, 0x68, 0xca, 0x4f, 0x45, 0xa8, 0xf4, 0x3c, 0x3f, 0x48,
	0x23, 0x8a, 0x7b, 0x50, 0x8e, 0x13, 0x2f, 0x49, 0x63, 0xde, 0xb4, 0x79, 0xa0, 0x3c, 0xf6, 0xf4,
	0x72, 0xa2, 0x32, 0xe0, 0x2c, 0x92, 0xb3, 0x33, 0xb7, 0x09, 0x8d, 0x63, 0x6f, 0x4c, 0x79, 0xbe,
	0x2a, 0x59, 0x40, 0xf9, 0xb3, 0x00, 0xe5, 0x79, 0x33, 0xae, 0x41, 0xc5, 0xb5, 0x8e, 0x2c, 0xfb,
	0xb5, 0x85, 0x0a, 0xb8, 0x0a, 0xeb, 0x3a, 0x21, 0x36, 0x41, 0x02, 0xae, 0xc3, 0x46, 0x57, 0xb5,
	0xba, 0xba, 0xa9, 0x6b, 0xa8, 0x88, 0x1b, 0x50, 0xb5, 0x6c, 0xe7, 0xac, 0x67, 0xbb, 0x96, 0x86,
	0xd6, 0x30, 0x86, 0x4d, 0xd5, 0x24, 0xba, 0xaa, 0xbd, 0x39, 0xd3, 0x4f, 0x8c, 0x81, 0x33, 0x40,
	0x25, 0x8c, 0xa0, 0xee, 0x5a, 0xaa, 0xeb, 0xbc, 0xb0, 0x89, 0x71, 0xaa, 0x6b, 0x68, 0x3d, 0x23,
	0xf5, 0x6c, 0xd2, 0x31, 0x34, 0x4d, 0xb7, 0x50, 0x99, 0x2b, 0xda, 0x56, 0xcf, 0x34, 0xba, 0x0e,
	0xaa, 0x64, 0xbe, 0x86, 0x75, 0xac, 0x9a, 0x86, 0x86, 0x36, 0xf0, 0x5f, 0x50, 0x73, 0x2d, 0xf5,
	0x58, 0x35, 0x4c, 0xb5, 0x63, 0xea, 0xa8, 0x8a, 0xb7, 0xa0, 0x91, 0xf9, 0x0d, 0xdc, 0x7e, 0xdf,
	0x26, 0x8e, 0xae, 0x21, 0xc8, 0x08, 0x8e, 0xf1, 0x52, 0xb7, 0x5d, 0x07, 0xd5, 0xb2, 0xa0, 0x3d,
	0xd5, 0x35, 0x1d, 0x54, 0xcf, 0x64, 0x0d, 0xcb, 0xd1, 0x89, 0xa5, 0x9a, 0xa8, 0x21, 0x7f, 0x14,
	0x60, 0xeb, 0xfe, 0x4f, 0x9c, 0x7a, 0x61, 0xfc, 0x96, 0x3d, 0xc9, 0xb0, 0x9f, 0xe7, 0xdb, 0xa0,
	0xf8, 0x3b, 0xdb, 0xa0, 0x94, 0x6d, 0x83, 0x7c, 0x13, 0xa4, 0xd0, 0x58, 0xb9, 0xcc, 0xc6, 0x14,
	0xd3, 0xe8, 0xd2, 0x1f, 0x52, 0x9e, 0xab, 0x4a, 0x16, 0x10, 0xff, 0x0b, 0xd5, 0xa9, 0x37, 0xa1,
	0x71, 0xe8, 0x0d, 0x17, 0x23, 0xbc, 0x2f, 0x60, 0x0c, 0xa5, 0x0c, 0x88, 0x6b, 0xfc, 0x82, 0x9f,
	0xf9, 0x03, 0x8b, 0xd8, 0x85, 0x1f, 0x50, 0xb1, 0x34, 0xd7, 0xca, 0x61, 0x47, 0xbc, 0x9e, 0x49,
	0xc2, 0xcd, 0x4c, 0x12, 0xbe, 0xce, 0x24, 0xe1, 0xc3, 0x9d, 0x54, 0xb8, 0xb9, 0x93, 0x0a, 0x5f,
	0xee, 0xa4, 0xc2, 0x79, 0x99, 0xe7, 0x3e, 0xfc, 0x1e, 0x00, 0x00, 0xff, 0xff, 0x6b, 0x1c, 0x85,
	0x84, 0x99, 0x05, 0x00, 0x00,
}

func (m *CreatePrimitiveInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePrimitiveInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePrimitiveInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PrimitiveSpec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPrimitive(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CreatePrimitiveOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePrimitiveOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePrimitiveOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PrimitiveID != 0 {
		i = encodeVarintPrimitive(dAtA, i, uint64(m.PrimitiveID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClosePrimitiveInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClosePrimitiveInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClosePrimitiveInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PrimitiveID != 0 {
		i = encodeVarintPrimitive(dAtA, i, uint64(m.PrimitiveID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClosePrimitiveOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClosePrimitiveOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClosePrimitiveOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PrimitiveProposalInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimitiveProposalInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimitiveProposalInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintPrimitive(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if m.PrimitiveID != 0 {
		i = encodeVarintPrimitive(dAtA, i, uint64(m.PrimitiveID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PrimitiveProposalOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimitiveProposalOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimitiveProposalOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintPrimitive(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrimitiveQueryInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimitiveQueryInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimitiveQueryInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintPrimitive(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if m.PrimitiveID != 0 {
		i = encodeVarintPrimitive(dAtA, i, uint64(m.PrimitiveID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PrimitiveQueryOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimitiveQueryOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimitiveQueryOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintPrimitive(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Failure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Failure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Failure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintPrimitive(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintPrimitive(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PrimitiveSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimitiveSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimitiveSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPrimitive(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.PrimitiveID != 0 {
		i = encodeVarintPrimitive(dAtA, i, uint64(m.PrimitiveID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PrimitiveSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimitiveSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimitiveSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Profile) > 0 {
		i -= len(m.Profile)
		copy(dAtA[i:], m.Profile)
		i = encodeVarintPrimitive(dAtA, i, uint64(len(m.Profile)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPrimitive(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPrimitive(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Service) > 0 {
		i -= len(m.Service)
		copy(dAtA[i:], m.Service)
		i = encodeVarintPrimitive(dAtA, i, uint64(len(m.Service)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPrimitive(dAtA []byte, offset int, v uint64) int {
	offset -= sovPrimitive(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreatePrimitiveInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PrimitiveSpec.Size()
	n += 1 + l + sovPrimitive(uint64(l))
	return n
}

func (m *CreatePrimitiveOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrimitiveID != 0 {
		n += 1 + sovPrimitive(uint64(m.PrimitiveID))
	}
	return n
}

func (m *ClosePrimitiveInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrimitiveID != 0 {
		n += 1 + sovPrimitive(uint64(m.PrimitiveID))
	}
	return n
}

func (m *ClosePrimitiveOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PrimitiveProposalInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrimitiveID != 0 {
		n += 1 + sovPrimitive(uint64(m.PrimitiveID))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovPrimitive(uint64(l))
	}
	return n
}

func (m *PrimitiveProposalOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovPrimitive(uint64(l))
	}
	return n
}

func (m *PrimitiveQueryInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrimitiveID != 0 {
		n += 1 + sovPrimitive(uint64(m.PrimitiveID))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovPrimitive(uint64(l))
	}
	return n
}

func (m *PrimitiveQueryOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovPrimitive(uint64(l))
	}
	return n
}

func (m *Failure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovPrimitive(uint64(m.Status))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPrimitive(uint64(l))
	}
	return n
}

func (m *PrimitiveSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrimitiveID != 0 {
		n += 1 + sovPrimitive(uint64(m.PrimitiveID))
	}
	l = m.Spec.Size()
	n += 1 + l + sovPrimitive(uint64(l))
	return n
}

func (m *PrimitiveSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovPrimitive(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPrimitive(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPrimitive(uint64(l))
	}
	l = len(m.Profile)
	if l > 0 {
		n += 1 + l + sovPrimitive(uint64(l))
	}
	return n
}

func sovPrimitive(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPrimitive(x uint64) (n int) {
	return sovPrimitive(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreatePrimitiveInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrimitive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePrimitiveInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePrimitiveInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimitiveSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrimitive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrimitive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrimitive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrimitiveSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrimitive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrimitive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePrimitiveOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrimitive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePrimitiveOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePrimitiveOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimitiveID", wireType)
			}
			m.PrimitiveID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrimitive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimitiveID |= PrimitiveID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrimitive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrimitive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClosePrimitiveInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrimitive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClosePrimitiveInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClosePrimitiveInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimitiveID", wireType)
			}
			m.PrimitiveID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrimitive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimitiveID |= PrimitiveID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrimitive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrimitive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClosePrimitiveOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrimitive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClosePrimitiveOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClosePrimitiveOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPrimitive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrimitive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrimitiveProposalInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrimitive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrimitiveProposalInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrimitiveProposalInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimitiveID", wireType)
			}
			m.PrimitiveID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrimitive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimitiveID |= PrimitiveID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrimitive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPrimitive
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPrimitive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrimitive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrimitive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrimitiveProposalOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrimitive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrimitiveProposalOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrimitiveProposalOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrimitive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPrimitive
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPrimitive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrimitive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrimitive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrimitiveQueryInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrimitive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrimitiveQueryInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrimitiveQueryInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimitiveID", wireType)
			}
			m.PrimitiveID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrimitive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimitiveID |= PrimitiveID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrimitive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPrimitive
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPrimitive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrimitive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrimitive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrimitiveQueryOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrimitive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrimitiveQueryOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrimitiveQueryOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrimitive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPrimitive
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPrimitive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrimitive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrimitive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Failure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrimitive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Failure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Failure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrimitive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Failure_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrimitive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrimitive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrimitive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrimitive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrimitive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrimitiveSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrimitive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrimitiveSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrimitiveSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimitiveID", wireType)
			}
			m.PrimitiveID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrimitive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimitiveID |= PrimitiveID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrimitive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrimitive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrimitive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrimitive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrimitive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrimitiveSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrimitive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrimitiveSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrimitiveSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrimitive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrimitive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrimitive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrimitive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrimitive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrimitive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrimitive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrimitive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrimitive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrimitive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrimitive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrimitive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrimitive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrimitive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrimitive(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrimitive
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrimitive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrimitive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPrimitive
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPrimitive
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPrimitive
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPrimitive        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrimitive          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPrimitive = fmt.Errorf("proto: unexpected end of group")
)
